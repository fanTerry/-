package com.esportzoo.esport.controller.user;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.esportzoo.common.appmodel.domain.result.ModelResult;
import com.esportzoo.esport.client.service.consumer.UserConsumerServiceClient;
import com.esportzoo.esport.connect.request.BasePageRequest;
import com.esportzoo.esport.connect.response.CommonResponse;
import com.esportzoo.esport.controller.BaseController;
import com.esportzoo.esport.domain.UserConsumer;
import com.esportzoo.esport.vo.cms.FollowUserParam;
import com.esportzoo.esport.vo.cms.FollowedUserPageQueryParam;
import com.esportzoo.esport.vo.cms.FollowedUserPageQueryResult;
import com.esportzoo.esport.vo.cms.FollowedUserVo;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;

@Controller
@RequestMapping("user")
@Api(value = "用户相关接口", tags={"用户相关接口"})
public class UserController extends BaseController {
	
	@Autowired
	private UserConsumerServiceClient userConsumerServiceClient;
	
	@RequestMapping(value="/follow", produces = "application/json; charset=utf-8", method = RequestMethod.POST)
	@ApiOperation(value = "关注或取消关注接口", httpMethod = "POST", consumes = "application/x-www-form-urlencoded", produces = "application/json")
	@ApiResponse(code = 200, message = "关注或取消关注接口", response = CommonResponse.class)
	@ResponseBody
	public CommonResponse<Boolean> followOrCancel(@ApiParam(required=true, value="1=关注 0=取消关注")int type, @ApiParam(required=true, value="用户id")Long usrId, HttpServletRequest request) {
		try {
			UserConsumer userConsumer = getLoginUsr(request);
			if (userConsumer == null) {
				logger.info("关注或取消关注接口,未获取到登录用户信息，type={}，usrId={}", type, usrId);
				return CommonResponse.withErrorResp("未获取到登录用户信息");
			}
			FollowUserParam param = new FollowUserParam();
			param.setUserId(userConsumer.getId());
			param.setType(type);
			param.setFollowUserId(usrId);
			ModelResult<Boolean> modelResult = userConsumerServiceClient.followUser(param);
			if (!modelResult.isSuccess()) {
				logger.info("关注或取消关注接口，调用接口返回错误，type={}，usrId={}, errMsg={}", type, usrId, modelResult.getErrorMsg());
				return CommonResponse.withErrorResp(modelResult.getErrorMsg());
			}
			return CommonResponse.withSuccessResp(modelResult.getModel());
		} catch (Exception e) {
			logger.info("关注或取消关注接口，发生异常，type={}，usrId={}, exception={}", type, usrId, e.getMessage(), e);
			return CommonResponse.withErrorResp(e.getMessage());
		}
	}
	
	@RequestMapping(value = "/pageFollowedUser", produces = "application/json; charset=utf-8", method = RequestMethod.POST)
	@ApiOperation(value = "分页查询关注的用户接口", httpMethod = "POST", consumes = "application/x-www-form-urlencoded", produces = "application/json")
	@ApiResponse(code = 200, message = "分页查询关注的用户接口", response = CommonResponse.class)
	@ResponseBody
	public CommonResponse<FollowedUserPageQueryResult> pageFollowedUser(BasePageRequest basePageRequest, HttpServletRequest request) {
		try {
			UserConsumer userConsumer = getLoginUsr(request);
			if (userConsumer == null) {
				logger.info("分页查询关注的用户接口,未获取到登录用户信息,");
				return CommonResponse.withErrorResp("未获取到登录用户信息");
			}
			FollowedUserPageQueryParam param = new FollowedUserPageQueryParam();
			param.setUserId(userConsumer.getId());
			param.setPageNo(basePageRequest.getPageNo());
			param.setPageSize(basePageRequest.getPageSize());
			ModelResult<FollowedUserPageQueryResult> modelResult = userConsumerServiceClient.pageQueryFollowedUser(param);
			if (!modelResult.isSuccess()) {
				logger.info("分页查询关注的用户接口,调用接口返回错误,errorMsg={}", modelResult.getErrorMsg());
				return CommonResponse.withErrorResp("调用接口返回错误,errorMsg=" + modelResult.getErrorMsg());
			}
			return CommonResponse.withSuccessResp(modelResult.getModel());
		} catch (Exception e) {
			logger.info("分页查询关注的用户接口,发生异常,exception={}", e.getMessage(), e);
			return CommonResponse.withErrorResp(e.getMessage());
		}
	}
	
	@RequestMapping(value = "/allFollowedUser", produces = "application/json; charset=utf-8", method = RequestMethod.POST)
	@ApiOperation(value = "查询全部的关注用户接口", httpMethod = "POST", consumes = "application/x-www-form-urlencoded", produces = "application/json")
	@ApiResponse(code = 200, message = "查询全部的关注用户接口", response = CommonResponse.class)
	@ResponseBody
	public CommonResponse<List<FollowedUserVo>> allFollowedUser(HttpServletRequest request) {
		try {
			UserConsumer userConsumer = getLoginUsr(request);
			if (userConsumer == null) {
				logger.info("查询全部的关注用户接口,未获取到登录用户信息,");
				return CommonResponse.withErrorResp("未获取到登录用户信息");
			}
			ModelResult<List<FollowedUserVo>> modelResult = userConsumerServiceClient.queryAllFollowedUser(userConsumer.getId());
			if (!modelResult.isSuccess()) {
				logger.info("查询全部的关注用户接口,调用接口返回错误,errorMsg={}", modelResult.getErrorMsg());
				return CommonResponse.withErrorResp("调用接口返回错误,errorMsg=" + modelResult.getErrorMsg());
			}
			return CommonResponse.withSuccessResp(modelResult.getModel());
		} catch (Exception e) {
			logger.info("查询全部的关注用户接口,发生异常,exception={}", e.getMessage(), e);
			return CommonResponse.withErrorResp(e.getMessage());
		}
	}
	
}
