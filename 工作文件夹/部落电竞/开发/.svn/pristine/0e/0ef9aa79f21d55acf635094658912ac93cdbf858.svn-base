<template>
  <div v-if="dataItem" @click="toComment(dataItem.commentId,dataItem.usrName)">
    <div class="user_info">
      <div>
        <img :src="dataItem.usrIcon|getDefaultImg(globalConst.userDefaultIcon)" alt />
        <div>
          <div class="name">{{dataItem.usrName}}</div>
          <p class="tips">
            <span v-if="floorType">#{{dataItem.floor}}</span>
            <span>{{dataItem.commentTimeStr}}</span>
          </p>
        </div>
      </div>
      <template v-if="hotFlag==1">
        <div :class="dataItem.followFlag?'followed_btn':'follow_btn'" @click.stop="_toFollow">
          <span v-if="!dataItem.followFlag">+ 关注</span>
          <span v-else>已关注</span>
        </div>
      </template>
    </div>

    <div class="con">
      <p class="txt">
        {{dataItem.content}}
        <span v-if="dataItem.parentContent!=null"><i>
            //</i><span class="user_name" @click="toUserContent(dataItem.parentUsrId)">@{{dataItem.parentUsrName}}：</span>{{dataItem.parentContent}}</span>
      </p>
      <div class="feedback_item">
        <div class="flex_hc">
          <div class="feedback_icon" :class="{'active':dataItem.upFlag}" @click.stop="_toUp">
            <i class="good_icon"></i>
            <span>{{dataItem.ups}}</span>
          </div>
          <div class="feedback_icon" v-if="replyType==1">
            <button @click.stop="canComment(dataItem.commentId,dataItem.usrName)"></button>
            <i class="comment_icon"></i>
            <span>{{dataItem.replies}}</span>
          </div>

          <div class="feedback_icon" v-else>
            <button @click.stop="toReply(dataItem.commentId,dataItem.usrName)"></button>
            <i class="comment_icon"></i>
            <span>{{dataItem.replies}}</span>
          </div>
          <!-- <div class="feedback_icon" :class="{'active':cmsDetail.favoritesFlag}">
                          <i class="collect_icon"></i>
                          <span>{{cmsDetail.favorites}}</span>
        </div>-->
        </div>
        <div class="feedback_icon delete_icon" v-if="dataItem.currentUserCreate" @click.stop="toDelComment"></div>
      </div>
      <!-- <div class="follow_comment" v-if="subCommentListLen>0">
        <p v-for="(item,index) in subCommentList" :key="index">
          {{item.usrName}}：
          <span>{{item.content}}</span>
        </p> -->
      <!-- <p>共12条回复></p> -->
      <!-- <template v-if="subCommentListLen>showLen">
          <p class="toggle_txt up" v-if="showMoreFlag" @click="_showOrHideMore">收起回复</p>
          <p class="toggle_txt" v-else @click="_showOrHideMore">查看更多回复</p>
        </template>
      </!-->
    </div>
    <!-- 删除评论弹窗 -->
    <delete-pop :showPop='showPop' @close='close' @confirm='confirm' type="2">
      <div class="delete_title">确定删除这条评论吗?</div>
    </delete-pop>

  </div>
</template>

<script type="text/ecmascript-6">
import localStorage from "../../libs/storages/localStorage";
import deletePop from "../../components/pop_up/pop_alert.vue";
import sessionStorage from "../../libs/storages/sessionStorage";

const COMPONENT_NAME = "article-discuss-item";
export default {
  name: COMPONENT_NAME,
  components: {
    deletePop
  },
  props: {
    commentItem: Object,
    hotFlag: Number,
    replyType: Number, //回复类型
    floorType: Boolean, //是否显示楼层
    showType: Number //区分评论显示类型
  },
  data() {
    return {
      showMoreFlag: false,
      showLen: 4,
      dataItem: Object, //页面渲染传进来的对象,操作这个
      subCommentList: [],
      subCommentListLen: 0, //当前评论子评论总条数
      // curUserId: Number, //当前用户id
      showPop: false, //确定弹窗
      cmsCommentId: Number, //一级评论id
      toCommentType: true //去二级评论页
    };
  },
  computed: {},
  created() {},
  mounted() {
    var pageDataItem = this.commentItem; //当前页的数据
    var storeUp = localStorage.get("comment_up_" + pageDataItem.commentId);
    var storeFollow = localStorage.get("comment_follow_" + pageDataItem.usrId);
    if (storeUp) pageDataItem.upFlag = true;
    if (storeFollow) pageDataItem.followFlag = true;
    if (this.showType != 2) {
      this.reflushData(pageDataItem);
    } else {
      this.dataItem = pageDataItem;
    }
    // this.curUserId = localStorage.get("user").userId;
  },
  methods: {
    toReply(commentId, commentUsrName) {
      this.$emit("toReplyFocus", commentId, commentUsrName);
    },

    toUserContent(userId) {
      // e.stopPropagation();
      console.log(this.$route.meta.isBack);
      this.$router.push({
        path: "/userCenter/userPublishArticle",
        query: {
          id: userId
        }
      });
    },
    /**关注/取消关注用户 */
    _toFollow: function() {
      var _self = this,
        item = this.dataItem,
        type = 0,
        content = "关注成功";
      var toFollowUsrId = item.usrId;
      // var curUsrId = app.getGlobalUserInfo().usrId;
      // if (curUsrId === toFollowUsrId) {
      //   this.$toast("您不能关注自己", 3);
      //   return;
      // }
      var storeFollow = localStorage.get("comment_follow_" + item.usrId); //获取全部关注的usrId
      console.error(storeFollow, "storeFollow");
      if (item.followFlag) {
        type = 0; //当前是关注-->则type是要取消关注
        item.ups -= 1;
        content = "取消关注";
        localStorage.remove("comment_follow_" + item.usrId); //删除取消关注的usrId
      } else {
        type = 1;
        item.ups += 1;
        localStorage.set("comment_follow_" + item.usrId, true); //新增关注的usrId
      }
      item.followFlag = !item.followFlag;
      this.$post("/api/user/follow", {
        type: type,
        usrId: toFollowUsrId
      }).then(res => {
        if (res.code == "200" && res.data) {
          //操作成功
          this.$toast(content, 2);
          this.dataItem = item;
        }
      });
    },

    /**赞或者取消赞 */
    _toUp: function() {
      var _self = this,
        item = this.dataItem,
        type = 0,
        content = "点赞成功";
      var storeUp = localStorage.get("comment_up_" + item.commentId); //获取全部点赞的comment_id
      if (item.upFlag) {
        type = 0; //当前是赞-->则type是要取消赞
        item.ups -= 1;
        content = "取消点赞";
        localStorage.remove("comment_up_" + item.commentId); //删除取消赞的comment_id
      } else {
        type = 1;
        item.ups += 1;
        localStorage.set("comment_up_" + item.commentId, true); //新增赞的comment_id
      }
      item.upFlag = !item.upFlag;
      this.$post("/api/cmsComment/ups", {
        type: type,
        id: item.commentId
      }).then(res => {
        console.log(res, "操作");
        if (res.code == "200" && res.data) {
          //操作成功
          this.$toast(content, 2);
          _self.dataItem = item;
        }
      });
    },

    /**收起或者查看更多 */
    _showOrHideMore(e) {
      var _self = this;
      var nowFlag = !this.showMoreFlag,
        subCommentList = JSON.parse(JSON.stringify(this.subCommentList));
      this.showMoreFlag = nowFlag;
      if (nowFlag) {
        //true:展开更多,false 收起
        this.subCommentList = this.dataItem.subCommentList; //所有子评论记录
      } else {
        this.subCommentList = subCommentList.splice(0, _self.showLen);
      }
    },

    /**刷新组件的数据 */
    getData(data) {
      console.log(data, "刷新数据");
      data.upFlag = this.dataItem.upFlag;
      data.followFlag = this.dataItem.followFlag;
      this.reflushData(data);
    },
    /**刷新当前组件数据 */
    reflushData(data) {
      var subCommentListCp = JSON.parse(JSON.stringify(data.subCommentList));
      var subCommentListLen = 0;
      if (data && data.subCommentList) {
        subCommentListLen = data.subCommentList.length;
      }
      this.dataItem = data;
      this.subCommentList = data.subCommentList;
      this.subCommentListLen = subCommentListLen;
      if (subCommentListLen >= this.showLen) {
        this.subCommentList = subCommentListCp.splice(0, this.showLen);
      }
    },

    _delUserComment() {
      var _self = this,
        item = this.dataItem;
      console.log(item.commentId + "参数");
      return this.$post("/api/cmsComment/delUserComment", {
        commentId: item.commentId
      })
        .then(res => {
          const dataResponse = res;
          console.log(dataResponse, 666);
          if (dataResponse.code == 200) {
            this.$nextTick(() => {
              this.$toast("删除成功", 2);
            });
            // location.reload();
            this.$emit("refreshComment", this.showType);
            console.log("刷新数据");
          }
        })
        .catch(error => {
          this.$toast("网络异常，稍后再试");
          console.log(error);
        });
    },
    toDelComment() {
      this.showPop = true;
      this.toCommentType = false;
    },
    confirm: function() {
      this.showPop = false;
      this._delUserComment();
      setTimeout(() => {
        //设置延迟执行
        this.toCommentType = true;
      }, 1000);
    },
    close() {
      this.showPop = false;
      setTimeout(() => {
        //设置延迟执行
        this.toCommentType = true;
      }, 1000);
    },

    toComment(commentId, commentUsrName) {
      console.log(this.replyType, this.toCommentType);
      var _self = this,
      replyNum = this.dataItem.replies;
      if (this.replyType && this.toCommentType == true&&replyNum>0) {
        console.log("详细的评论页面", commentId);
        sessionStorage.set("commentId", commentId);
        this.$emit("toDetailedComment", commentUsrName);
      }
    },
    canComment(commentId, commentUsrName) {
      var _self = this,
        replyNum = this.dataItem.replies;
      console.log(replyNum);
      if (replyNum > 0) {
        //打开二级评论页面
        console.log("qu二级评论页面");
        this.toComment(commentId, commentUsrName);
      } else {
        this.toReply(commentId, commentUsrName);
      }
    }
  },
  watch: {}
};
</script>


<style lang="scss" scoped>
@import "../../assets/common/_mixin";
@import "../../assets/common/_base";
@import "../../assets/common/_var";

.delete_icon {
  width: 19px;
  height: 19px;
  @include getBgImg("../../assets/images/home/delete_icon.png");
  background-size: 19px;
}

.user_info {
  padding-top: 12px;
  padding-bottom: 10px;
}
.con {
  padding: 0 10px 0 38px;
  .txt {
    color: #3b3b3b;
    font-size: 16px;
    line-height: 20px;
  }
}
.user_name {
  color: #0f87ff;
}
.feedback_item {
  @extend .flex_v_justify;
  padding: 14px 0 16px;
  .feedback_icon {
    @extend .flex_hc;
    position: relative;
    color: #818181;
    margin-right: 24px;
  }
  .delete_icon {
    margin-right: 0;
  }
  .active {
    color: $color_main;
    .good_icon {
      @include getBgImg("../../assets/images/home/good_active.png");
    }
  }
  button {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
  }
  i {
    width: 26px;
    height: 26px;
  }
  span {
    padding: 0;
    font-size: 14px;
  }
}
.follow_comment {
  padding: 10px 28px 10px 15px;
  background-color: #efefef;
  border-radius: 5px;
  p {
    padding-bottom: 8px;
    font-size: 16px;
    line-height: 22px;
    color: #333;
    &:last-child {
      padding-bottom: 0;
    }
    span {
      color: #999;
    }
  }
  .toggle_txt {
    @extend .flex_v_h;
    position: relative;
    font-size: 14px;
    color: #999;
    text-align: center;
    &::after {
      content: "";
      display: block;
      width: 5px;
      height: 5px;
      margin-left: 10px;
      border: solid #999;
      border-width: 0 1px 1px 0;
      transform: rotate(45deg);
      -webkit-transform: rotate(45deg);
      transform-origin: center right;
      -webkit-transform-origin: center right;
    }
    &.up {
      &::after {
        transform: rotate(225deg);
        -webkit-transform: rotate(225deg);
      }
    }
  }
}
.delete_title {
  line-height: 45px;
  text-align: center;
  font-size: 17px;
  color: #333;
}
</style>


