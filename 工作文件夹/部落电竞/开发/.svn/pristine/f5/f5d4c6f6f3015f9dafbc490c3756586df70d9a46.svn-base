<template>
  <div class="login-container">
    <!--    <span>QQ第三方登录 - 回调页面</span>-->    
    <loading v-if="loading"></loading>
  </div>
</template>

<script>
import loading from "components/common/loading";
// import QC from "../../../libs/qqLogin.js";
import { getCookie, delCookie } from "../../../libs/utils";
export default {
  components: {
    loading
    // QC
  },
  name: "qqLogin",
  data() {
    return {
      loading: false,
    };
  },

  created() {
    console.log(window.localStorage.getItem("qqLoginType"));
    // this.qqLogin();//基于JSSDK
    if(window.localStorage.getItem("qqLoginType")==1){
      this.toqqLogin(); //基于接口
      this.loading=true;
    }   
  },
  mounted(){
        // 添加返回事件监听
        if (window.history && window.history.pushState){
          window.addEventListener("popstate",function(e){
            //这里进行跳转操作
            console.log("记录1");
          }, false);
        }
        this.pushHistory()
      },
  methods: {
    // QQ第三方登录
    qqLogin() {
      var that = this; // 先将vue这个对象保存在_self对象中
      console.log("进入QQ回调处理页面");
      //检查是否登录
      if (QC.Login.check()) {
        //该处的openId，accessToken就是后台需要的参数了，后台通过这些参数拿取临时登录凭证，然后就是自己的逻辑了
        QC.Login.getMe(function(openId, accessToken) {
          // 传参给后台进行登录验证
          console.log("获得的openid，accessToken:", openId, accessToken);
          that.toLogin(openId, accessToken);
        });
        console.log("已登录!");
      } else {
        console.log("未登录!");
      }
    },

    //传参给后台进行登录验证
    toLogin(openId, accessToken) {
      console.log("传openId，accessToken到后台");
      return this.$post("/api/qqlogin/login", {
        openId: openId,
        accessToken: accessToken
      })
        .then(dataResponse => {
          console.log("返回的参数", dataResponse);
          if (dataResponse.code != "200") {
            this.$toast(dataResponse.message);
            return;
          }
          //QQ第一次授权登录，后台不设置cookie，跳转到手机注册页面
          if (!dataResponse.data) {
            this.$router.push({
              path: "/register",
              query: {
                userInfo: dataResponse.data
              }
            });
          } else {
            this.afterLoginSuccess(dataResponse.data);
          }
        })
        .catch(error => {
          this.$toast("登录失败,请稍后重试");
          console.log(error);
        });
    },

    //调用登录接口成功后处理逻辑
    afterLoginSuccess(member) {
      if (/^1(3|4|5|6|7|8|9)\d{9}$/.test(member.nickName)) {
        member.nickName = member.nickName.substring(0, 7) + "XXXX";
      }
      let user = {
        nickName: member.nickName,
        icon: member.icon ? member.icon : this.globalConst.userDefaultIcon,
        userId: member.id,
        phone: member.phone
      };
      window.localStorage.setItem("user", JSON.stringify(user));
      window.localStorage.user = JSON.stringify(user);
      this.$store.dispatch("setUserInfo", user);
      let redirect = decodeURIComponent(
        window.localStorage.getItem("toRedirectUrl") || "/"
      );
      console.log(redirect, "回到拦截前的redirect");
      this.$router.push({
        path: redirect
      });
      setTimeout(_ => {
        window.localStorage.removeItem("toRedirectUrl");
      }, 500);
    },

    toqqLogin() {
      console.log(window.location.href, "获取当前URL");
      var code = this.GetURLString("code");
      var state = this.GetURLString("state");
      console.log("参数", code, state);
      return this.$post("/api/qqlogin/index", {
        code: code,
        state: state
      })
        .then(dataResponse => {
          console.log(dataResponse, "返回的消息");
          if (dataResponse.code != "200") {
            this.$toast(dataResponse.message);
            return;
          }
          var newUserType = dataResponse.data.newUser;
          var key = dataResponse.data.key;
          this.loading=false;
          window.localStorage.setItem("qqLoginType",2);
          //如果是新用户则跳转到注册页
          if (newUserType) {
            this.$router.push({
              path: "register",
              query: {
                key: key,
                newUserType: newUserType
              }
            });
          } else {
            this.afterLoginSuccess(dataResponse.data.h5LoginUserResponse);
          }
        })
        .catch(error => {
          this.$toast("登录失败,请稍后重试");
          console.log(error, 8888);
        });
    },
    //获取当前URL?后面的参数
    GetURLString(name) {
      var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
      var r = window.location.search.substr(1).match(reg); //获取url中"?"符后的字符串并正则匹配
      var context = "";
      if (r != null) context = r[2];
      reg = null;
      r = null;
      return context == null || context == "" || context == "undefined"
        ? ""
        : context;
    },
    pushHistory() {
      let state = {
        title: "",
        url: "/home"
      };
      window.history.pushState(state, state.title, state.url);
    },    

  },
  destroyed (){ 
        window.removeEventListener('popstate',this.radeRouterback, false);
      },
};
</script>
<style rel="stylesheet/scss" lang="scss"></style>
