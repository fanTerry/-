<template>

  <mescroll-vue ref="mescroll" :down="mescrollDown" :up="mescrollUp" @init="mescrollInit">
    <slot></slot>
  </mescroll-vue>

</template>


<script>
import MescrollVue from "mescroll.js/mescroll.vue";
export default {
  components: {
    MescrollVue
  },
  props: ["parentId"],
  data() {
    return {
      mescroll: null, // mescroll实例对象
      mescrollDown: {
        callback: this.downCallback,
        outOffsetRate: 0.1,
        offset: 80,
        inOffsetRate: 0.3
      },
      mescrollUp: {
        callback: this.upCallback,
        auto: false,
        offset: 100,
        isBounce: false,
        toTop: {},
        htmlNodata: '<p class="upwarp-nodata">没有更多数据了</p>',
        lazyLoad: {
          use: false,
          attr:
            "https://static.wanplus.com/data/default/banner.jpg?imageView2/1/w/308/h/208",
          showClass: "mescroll-lazy-in",
          delay: 500,
          offset: 200
        }
      },
      warpId: null
    };
  },
  created() {
    let toTop = {};
    toTop.src = require("../../assets/images/common/mescroll-totop.png");
    if (this.warpId) {
      toTop.warpId = this.warpId;
    }
    // toTop.warpClass =

    this.mescrollUp.toTop = toTop;
  },
  beforeRouteEnter(to, from, next) {
    // 如果没有配置回到顶部按钮或isBounce,则beforeRouteEnter不用写
    next(vm => {
      // 找到当前mescroll的ref,调用子组件mescroll-vue的beforeRouteEnter方法
      vm.$refs.mescroll && vm.$refs.mescroll.beforeRouteEnter(); // 进入路由时,滚动到原来的列表位置,恢复回到顶部按钮和isBounce的配置
    });
  },
  beforeRouteLeave(to, from, next) {
    // 如果没有配置回到顶部按钮或isBounce,则beforeRouteLeave不用写
    // 找到当前mescroll的ref,调用子组件mescroll-vue的beforeRouteLeave方法
    this.$refs.mescroll && this.$refs.mescroll.beforeRouteLeave(); // 退出路由时,记录列表滚动的位置,隐藏回到顶部按钮和isBounce的配置
    next();
  },
  methods: {
    downCallback() {
      this.$emit("downCallback");
      this.$nextTick(() => {
        this.mescroll.endSuccess(this.currPageSize);
      });
    },
    upCallback() {
      console.log("下拉刷新");
      this.$emit("upCallback");
      //   this.$nextTick(() => {
      //     this.mescroll.endSuccess(this.currPageSize);
      //   });
    },
    mescrollInit(mescroll) {
      this.mescroll = mescroll; // 如果this.mescroll对象没有使用到,则mescrollInit可以不用配置
      this.$emit("mescrollInit", mescroll);
    }
  }
};
</script>

<style lang="scss">
.mescroll-totop {
  bottom: 170px !important;
}
</style>
