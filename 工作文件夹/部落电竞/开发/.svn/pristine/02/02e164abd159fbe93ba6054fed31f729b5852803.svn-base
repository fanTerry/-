<template>
  <div class="Page guessPage" v-if='readyFlag'>
    <header class="mod_header">
      <div class="navBar">
        <div class="users">
          <img :src="userInfo.icon|getDefaultImg(globalConst.userDefaultIcon)" alt="">
          <!-- <p class="user_name">{{userInfo?userInfo.nickName:'未登录'}}</p> -->
          <p class="user_assets" @click="toCharge()">
            <img src="../../../assets/images/guess/starday0.png" alt="">
            <span>{{userInfo.ableRecScore}}</span>
            <i class="add"></i>
          </p>
          <div class="coco_points" @click="popUps.exchangePop.showExchangeType = true">
            <!-- <p>椰子分 / 嗨乐分</p> -->
            <p>椰子分</p>
            <a>{{userInfo.yeYunPoints?userInfo.yeYunPoints:'0'}}
              <!-- / {{userInfo.haiLePoints?userInfo.haiLePoints:'0'}} -->
            </a>
          </div>
        </div>
        <div class="herf_gather">
          <!-- <a class="get_icon" @click="popUps.showSignType = true"></a> -->
          <!-- <a class="exchange_icon" @click="popUps.showExchangeList = !popUps.showExchangeList"> -->

          <a class="exchange_icon" @click="goToYeYunPage()">
            <span v-if="popUps.exchangePop.showExchangeTips">话费/黄金可兑</span>
            <!-- <ul v-if="popUps.showExchangeList">
              <li @click="goToYeYunPage()">椰云商城</li>
              <li @click="goToHaiLePage()">嗨乐商城</li>
            </ul> -->
          </a>
          <a class="record_icon" @click="popUps.showRecordList = !popUps.showRecordList">
            <ul v-if="popUps.showRecordList">
              <li @click="goUrlPage('/guess/record')">预测记录</li>
              <!-- <li @click="openWinTop()">排行榜</li> -->
              <li @click="goUrlPage('/wallet')">星星流水</li>
              <li @click="goUrlPage('/guess/rules')">规则说明</li>
            </ul>
          </a>
        </div>
      </div>
      <!-- 刷新赔率进度条 -->
      <!-- <div class="progress">
        <p class="bar"></p>
      </div> -->
    </header>
    <!-- banner广告 -->

    <!-- <div class="main" id="main" @scroll="onScroll()"> -->
    <div class="main" id="mainId">
      <!--:class="{'ban_slide':popUps.exchangePop.showExchangeType||popUps.showSignType||getBetData.toCurBet}" 去掉-->
      <mescroll ref="mescroll" @downCallback="downCallback" @upCallback="upCallback" @mescrollInit="mescrollInit"
        :isShowEmpty="false">
        <!-- 运营位 -->
        <banner ref="banner" class="banner" v-if="bannerUrl.length > 0 " :adList='bannerUrl' @toPop="toPop"></banner>
        <!-- 跑马灯 -->
        <section class="mod_award" v-show="prizeList != '' && showHornFlag">
          <i class="horn_icon"></i>
          <div class="winner_scroll swiper-container">
            <ul class="swiper-wrapper">
              <li class="swiper-slide" v-for="(item,index) in prizeList" :key="index">
                <template v-if='item.type==1'>
                  <span>恭喜</span>
                  <span class="winner_name">{{item.userName}}</span>
                  <span>测预正确获得</span>
                  <span class="award_value">{{item.winPrizeAmount}}</span>
                  <span>星星!</span>
                </template>
                <template v-if='item.type==2'>
                  <span>恭喜</span>
                  <span class="winner_name">{{item.userName}}</span>
                  <span>成功兑换</span>
                  <span class="award_value">{{item.goodsName}}</span>
                </template>
                <template v-if='item.type==3'>
                  <span class="notice" @click="toLocation(item.noticeUrl)">{{item.noticeDesc}}</span>
                </template>
              </li>
            </ul>
          </div>
          <i class="horn_close" @click="closeHorn()"></i>
        </section>

        <nav class="match_tab">
          <ul class="list">
            <li :class="{'active':!leagueInfo.requestParam.videoGameId}" @click="changeGame(0,$event)">全部</li>
            <li :class="{'active':leagueInfo.requestParam.videoGameId==item.index}"
              v-for=" (item, index) in leagueInfo.gameList" :key="index" @click="changeGame(item.index,$event)">
              {{item.description}}
            </li>
          </ul>
        </nav>
        <ul class="guess_list" id="guess_list" v-if="leagueInfo.matchList.length != 0">
          <guess-item class="guess_item" :type=1 :matchInfo="item" v-for="(item,index) in leagueInfo.matchList"
            :key="index" @toCharge="toCharge">
          </guess-item>
        </ul>
        <!-- 没有数据时展示 -->
        <no-data v-if="noData" :text="'暂时没有新的比赛'" :imgUrl='require("../../../assets/images/guess/no_data_icon.png")'>
        </no-data>

        <!-- 点击加上active -->
        <a class="refresh_btn" :class="spUpdate.reflushFlag?'active':''" @click="onClickRefresh()"></a>

      </mescroll>
    </div>

    <!-- 关注公众号 -->
    <!-- <div class="ui_pop qr_code_pop" v-show="popUps.isFirstGuess">
      <div class="office">
        <a class='close' @click="closeFollow()"></a>
        <img src="../../../assets/images/guess/office_code.png" alt="">
        <p>长按图片识别二维码<br>关注公众号</p>
        <p class="office_txt">获取实时中奖通知和更多活动信息</p>
      </div>
    </div>  -->

    <!-- 引导浏览器登录弹窗 -->
    <div class="ui_pop to_browser_pop" v-show="isBrowserOpen">
      <img src="../../../assets/images/guess/to_browser.png" alt="">
    </div>

    <!-- 摇一摇入口 -->
    <!-- <shake-icon></shake-icon> -->
    <!-- <rank-icon @openWinTop="openWinTop"></rank-icon> -->

    <exchange-pop v-if="popUps.exchangePop.showExchangeType"
      @closeExchangePop='popUps.exchangePop.showExchangeType = false'></exchange-pop>
    <hot-game @toCharge="toCharge"></hot-game>
    <!-- <sign-pop v-if="popUps.showSignType" @closeSignPop='closeSignPop' @updateWallet="updateWallet"></sign-pop> -->
    <daily-award v-if="popUps.award.showDailyAward" @closeDailyAward="closeDailyAward"
      :winPrize="popUps.award.winPrize"></daily-award>
    <recharge-pop v-if="popUps.payPops.showRechargePop" @closeRechargePop="closeRechargePop"
      @getUserWallet="getUserWallet" @openPopAlert="openPopAlert">
    </recharge-pop>
    <pop-Alert :showPop="popUps.payPops.showPop" @close="popUps.payPops.showPop=false" @confirm="confirm" btnTxt1="已取消"
      btnTxt2="已完成支付" type="2">
      <p>请确认支付是否已完成</p>
    </pop-Alert>
    <footer class="mod_footer">
      <tabbar></tabbar>
    </footer>
  </div>
</template>

<script>
import guessItem from "./components/guessItem.vue";
import exchangePop from "../pointsExchange.vue";
import { mapGetters, mapActions } from "vuex";
import mescroll from "../../../components/common/mescroll";
import banner from "../../../components/header/banner/swiper.vue";
import signPop from "../sign.vue";
import hotGame from "./components/hotGame.vue";
import dailyAward from "../dailyAward.vue";
import rechargePop from "../recharge/recharge.vue";
import popAlert from "../../../components/pop_up/pop_alert.vue";
import Swiper from "swiper";
import { getQueryString } from "../../../libs/utils";
import rankIcon from "../../hd/hd105/rankIcon.vue";
import shakeIcon from "./components/shakeIcon.vue";
import noData from "../../../components/no_data/index.vue";
import tabbar from "../../../components/tabbar/index.vue";
// import * as socketGuess from '../../../libs/websocket/socketGuess.js';
//定时任务
var spSchdule = null;
export default {
  components: {
    guessItem,
    exchangePop,
    mescroll,
    banner,
    signPop,
    hotGame,
    dailyAward,
    rechargePop,
    popAlert,
    rankIcon,
    shakeIcon,
    noData,
    tabbar
  },
  props: [],
  data() {
    return {
      //弹窗集合
      popUps: {
        showRecordList: false, //预测记录、流水灯

        //中奖弹窗
        award: {
          showDailyAward: false, //提示
          winPrize: 0, //中奖总金额
        },
        //支付
        payPops: {
          showRechargePop: false, //支付弹窗
          showPop: false,
        },
        //兑换
        exchangePop: {
          showExchangeType: false, //积分兑换弹窗
          showExchangeTips: false, //兑奖提示
        },
        //目前暂停使用
        showExchangeList: false, //椰云积分，嗨乐积分列表,暂时不用
        showSignType: false,
        isFirstGuess: false,

      },

      //联赛数据
      leagueInfo: {
        matchList: [], //赛事列表
        currSpList: "", //用于刷新赔率
        currPageSize: 10,
        gameList: [],
        loadMore: true, //加载更多
        requestParam: {
          pageNo: 1,
          pageSize: 10,
          totalPages: 0,
          leagueId: null,
          videoGameId: null
        },


      },

      //赔率刷新
      spUpdate: {
        spUpdatTime: 5, //赔率刷新间隔是啊集 单位秒
        reflushFlag: false,

      },

      noData: false,
      showHornFlag: true,//跑马灯
      stopReapeat: false,
      bannerUrl: [], // 广告
      readyFlag: false,
      swiper: null,
      prizeList: [],
      shareCode: null,
      tomorrowAward: "",
      isBrowserOpen: false, //是否是浏览器打开

    };
  },
  created() {
    // console.log("wsSocket");
    // this.openAndinitWebSocket();
  },
  computed: {
    ...mapGetters({
      getBetData: "getBetData",
      getGuessData: "getGuessData",
      userInfo: "getUserInfo"
    })
  },
  watch: {
    getBetData(val) {
      //当用户点击投注弹出，先暂停刷新
      if (val.toCurBet) {
        console.log("清楚");
        clearInterval(spSchdule);
      } else {
        console.log("开始刷新");
      }
      if (val.toReflushBalance) {
        //下单完刷新余额
        this.getUserWallet();
      }
    },
    getGuessData(val) {
      console.log("getGuessData", val);
      if (val.isFirstGuess) {
        //下单完刷新余额
        this.showQrCode();
        // this.popUps.isFirstGuess = true;
        // 阻止ios系统下弹窗拉起，底部仍会滑动的问题
        // let qrCodePop = document.getElementsByClassName("qr_code_pop")[0];
        // qrCodePop.ontouchmove = function(e) {
        //   e.preventDefault();
        // };
      }
    }
  },
  mounted() {
    
    // this.startTest();
    this.webSocketConfig();
    if (this.checkOpenH5InWx()) {
      this.isBrowserOpen = true;
    }
    this.stopAppEnter();
    //预测banner广告
    this.getBannerUrl();
    // this.getUserWallet();
    // this.getIndexMatchData();
    // this.queryYeYunPoints();
    // this.getLeagueList();
    this.getGameList();
    //提示中奖弹窗
    this.getDailyAward();
    // this.getHdShareCode();

    document.addEventListener("click", e => {
      let recordIcon = document.querySelector(".record_icon");
      let exchangeIcon = document.querySelector(".exchange_icon");
      if (recordIcon && !recordIcon.contains(e.target)) {
        this.popUps.showRecordList = false;
      }
      if (exchangeIcon && !exchangeIcon.contains(e.target)) {
        this.popUps.showExchangeList = false;
      }
    });
    this.$wxApi.wxRegister({
      title: "王者KPL预测",
      desc: "免费领预测星星，预测赢百万好礼~",
      imgUrl:
        "http://rs.esportzoo.com/svn/esport-res/ddquiz/images/logo/dd_logo.png"
    });
  },
  activated() {

    this.intoWebsocketRoom();
    if (this.checkOpenH5InWx()) {
      this.isBrowserOpen = true;
    }
    this.prizeCarousel().then(() => {
      this.$nextTick(() => {
        if (this.prizeList != "") {
          this.initAwardSwiper();
        }
      });
    });
    this.stopAppEnter();
    this.dataRefresh();
    this.$wxApi.wxRegister({
      title: "王者KPL预测",
      desc: "免费领预测星星，预测赢百万好礼~",
      imgUrl:
        "http://rs.esportzoo.com/svn/esport-res/ddquiz/images/logo/dd_logo.png"
    });
    if (
      this.$route.query.agentId == 100104 ||
      this.$route.query.agentId == 100103
    ) {
      document.title = "枫叶电竞";
    }

  },
  deactivated() {
    if (this.swiper) {
      this.swiper.destroy(false);
    }
    clearInterval(spSchdule);
  },
  destroyed() {
    clearInterval(spSchdule);
    //关闭
    this.socketGuess.websocketclose();
  },
  methods: {
    ...mapActions(["setUserInfo"]),

    //进入赛事场景
    intoWebsocketRoom() {
      var initScene = this.socketGuess.getHomeRoomSceneMsg(this.userInfo.userId);
      this.socketGuess.socketObeject.initScene = initScene;
      console.log("websock", this.socketGuess.isConneted);
      if (this.socketGuess.isConneted) {
        this.socketGuess.toSendSocketMessage(initScene);
      } else {
        console.log("打开wsSocket");
        this.openAndinitWebSocket();
      }

    },
    //处理webSocket推送的数据 
    handleUpdateData(data) {
      if (data.execType == 12) {
        console.log("连接成功");
        return
      }
      let matchResponse = JSON.parse(data.playload);
      if (data.execType == 19) { // 首页赛事状态
        let deleteArray = [];
        this.leagueInfo.matchList.forEach((matchInfo,k) => {
          if (matchInfo.matchId == matchResponse.matchId) {

            if (data.matchType == 'match_game') {
              if (matchResponse.data && matchResponse.data.length > 0) {
                matchResponse.data.forEach(quizGame => {
                  if (matchInfo.quizMathGame.id == quizGame.matchGameId) {
                    matchInfo.quizMathGame.status = quizGame.status
                    matchInfo.quizMathGame.suspended = quizGame.suspended
                    // matchInfo.quizMathGame.visible = matchResponse.data.visible
                  }

                });
              }

            } else {
              matchInfo.matchStatus = matchResponse.status
              if (matchResponse.suspended==1 || matchResponse.visible==0 ) {
                deleteArray.push(k);
              }
            }

          }
        });
        //删掉暂停投注或者不可视的元素
        if (deleteArray.length>0) {
          for (const key in deleteArray) {
            this.leagueInfo.matchList.splice(key,1);
          }
          
        }

      }

      if (data.execType == 18) { // 首页赔率数据
        this.leagueInfo.matchList.forEach(matchInfo => {
          if (matchInfo.matchId == matchResponse.matchId) {
            if (matchResponse.data.length > 0) {

              matchResponse.data.forEach(quizGame => {
                if (matchInfo.quizMathGame.id == quizGame.matchGameId) {
                  matchInfo.quizMathGame.quizOptions.forEach((option, k) => {
                    option.limit = quizGame.odds[k].limit;
                    option.odds = quizGame.odds[k].odds;
                  });
                }

              });
            }

          }
        });

      }

    },

    webSocketConfig() {
      //监听websocket推送
      this.$bus.$on("webMessage", data => {
        // if (data.match_type == 'match') {
        this.handleUpdateData(data)
        // }

      });
      //断线重连重连
      this.$bus.$on("reconnect", data => {
        this.openAndinitWebSocket();
      });


    },
    /** 打开websocket*/
    openAndinitWebSocket() {
      console.log("获取websocket");
      if (this.socketGuess.stopRepeat) {
        return
      }
      this.socketGuess.stopRepeat = true;
      return this.$post("/api/user/getUserWebsocket")
        .then(rsp => {
          const dataResponse = rsp;
          console.log(dataResponse);
          this.socketGuess.socketObeject.socketUrl = dataResponse.data.socketUrl;
          this.socketGuess.socketObeject.userId = dataResponse.data.userId

          // var initScene = this.socketGuess.getHomeRoomSceneMsg(this.socketGuess.socketObeject.userId);
          // this.socketGuess.socketObeject.initScene = initScene;
          this.socketGuess.initWebSocket(this.socketGuess.socketObeject, this);
          console.log("初始化连接");
          this.socketGuess.stopRepeat = false;

        })
        .catch(error => {
          console.log(error);
        });
    },

    startTest() {
      console.log("测试性能开始");
      let _self = this;
      let num = 0
      var timer = setInterval(() => {
        console.log("连接次数："+num);
        if (num > 10000) {
          clearInterval(timer)
          return
        }
        _self.testinitSocket()
        num++

      }, 300);
    },
    //创造测试大量连接的性能
    testinitSocket() {
      return this.$post("/api/user/getUserWebsocket")
        .then(rsp => {
          const dataResponse = rsp;
          console.log(dataResponse);
          this.socketGuess.socketObeject.socketUrl = dataResponse.data.socketUrl;
          this.socketGuess.socketObeject.userId = this.getRandomUsrId(10000, 100000)
          var initScene = this.socketGuess.getHomeRoomSceneMsg(this.socketGuess.socketObeject.userId);
          this.socketGuess.socketObeject.initScene = initScene;
          console.log("userId:"+this.socketGuess.socketObeject.userId);
          this.socketGuess.initWebSocket(this.socketGuess.socketObeject, this);
          console.log("初始化连接");
          this.socketGuess.stopRepeat = false;

        })
        .catch(error => {
          console.log(error);
        });
    },

    getRandomUsrId(minNum, maxNum) {
      switch (arguments.length) {
        case 1:
          return parseInt(Math.random() * minNum + 1, 10);
          break;
        case 2:
          return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10);
          //或者 Math.floor(Math.random()*( maxNum - minNum + 1 ) + minNum );
          break;
        default:
          return 0;
          break;
      }
    },
    /**
     * @description: 用户获取分享二维码接口
     * @return:
     */
    getHdShareCode() {
      let param = {};
      var shareCode = getQueryString("shareCode");
      if (shareCode) {
        param.shareCode = shareCode;
      } else {
        console.log("没有携带邀请码");
        return;
      }
      return this.$post("/api/share/queryShareCode", param)
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            console.log(dataResponse.data, "获取活动分享码");
            if (dataResponse.data) {
              this.shareCode = dataResponse.data.shareCode;
              //有二维码的，携带二维码链接分享
              console.log("分享码", this.shareCode);
              // console.log("getUrlCommonParam", getUrlCommonParam());
              // let commonParam = getUrlCommonParam();
              // if (this.shareCode) {
              //   let slink = this.shareLink + commonParam + "&shareCode=" + this.shareCode;
              //   console.log("shareLink", slink);
              //   this.$wxApi.wxRegister({
              //     title: "送您100星星，请笑纳！",
              //     desc: "海量赛事预测，赢万元电竞外",
              //     imgUrl:
              //       "http://rs.esportzoo.com/svn/esport-res/ddquiz/images/logo/dd_logo.png",
              //     link: slink
              //   });
              // }else{
              //   console.log("res",dataResponse);
              //   this.$toast("获取分享二维码失败",2);
              // }
            }
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    showQrCode() {
      // let u = navigator.userAgent;
      // let isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
      // //如果是ios，执行下面的代码
      // if (isiOS) {
      //   this.$router.push({
      //     path: "/guess/ddBjnews",
      //     query: {}
      //   });
      // } else {
      //   this.popUps.isFirstGuess = true;
      // }
    },

    closeFollow() {
      this.popUps.isFirstGuess = false;
    },
    /**
     * 签到更新钱包余额
     */
    updateWallet(wallet) {
      this.setUserInfo({
        ...this.userInfo,
        ableRecScore: wallet
      });
    },
    initAwardSwiper() {
      this.swiper = new Swiper(".winner_scroll", {
        loop: true,
        autoplay: 2000,
        autoplayDisableOnInteraction: false,
        direction: "vertical",
        observer: true,
        observeParents: true
      });
    },
    // 跑马灯数据请求
    prizeCarousel() {
      return this.$post("/api/quiz/record/broadcastList")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            // console.log(dataResponse.data, "顶部获奖跑马灯");
            this.prizeList = dataResponse.data;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    closeHorn() {
      this.showHornFlag = false;
    },
    stopAppEnter() {
      //屏蔽app处理
      // if (
      //   this.$route.query.clientType == 3 ||
      //   this.$route.query.clientType == 4
      // ) {
      //   this.$router.push({
      //     path: "/home",
      //     query: {}
      //   });
      // }
    },

    mescrollInit(mescroll) {
      this.mescroll = mescroll; // 如果this.mescroll对象没有使用到,则mescrollInit可以不用配置
      // this.mescroll.setBounce(true)//允许iOS回弹,相当于配置up的isBounce为true
    },
    downCallback() {
      console.log("下拉刷新");
      // this.refresh(true);
      // this.mescroll.setPageNum(2);
      this.leagueInfo.matchList = [];
      this.leagueInfo.requestParam.pageNo = 1;
      this.getIndexMatchData().then(data => {
        this.mescroll.endSuccess(this.leagueInfo.currPageSize, this.leagueInfo.loadMore);
      });
    },
    upCallback() {
      console.log("上拉加载更多");
      console.log("loadmore");
      this.leagueInfo.requestParam.pageNo += 1;
      this.getIndexMatchData().then(data => {

        this.mescroll.endSuccess(this.leagueInfo.currPageSize, this.leagueInfo.loadMore);
      });
    },
    /** 中奖弹窗*/
    getDailyAward() {
      console.log("mountedmounted");
      return this.$post("/api/starNum/queryWinPrize")
        .then(rsp => {
          const dataResponse = rsp;
          console.log(dataResponse, "查询中奖弹窗返回");
          console.log(dataResponse.data.existWinPrize, "是否有中奖纪录");
          if (
            dataResponse.code == 200 &&
            dataResponse.data.existWinPrize == true
          ) {
            this.popUps.award.winPrize = dataResponse.data.winPrize;
            this.popUps.award.showDailyAward = true;
          }
          this.popUps.showSignType = dataResponse.data.signFirstByDay;
          console.log(" this.popUps.showSignType", this.popUps.showSignType);
        })
        .catch(error => {
          console.log(error);
        });
    },
    /**关闭中奖弹窗 */
    closeDailyAward() {
      this.popUps.award.showDailyAward = false;
      this.popUps.exchangePop.showExchangeTips = true;
      let _self = this;
      setTimeout(() => {
        _self.popUps.exchangePop.showExchangeTips = false;
      }, 10000);
    },
    // 关闭签到弹窗
    closeSignPop() {
      // if (param1 != null) {
      //   this.showAwardTips = true;
      //   this.tomorrowAward = param2;
      //   let _self = this;
      //   setTimeout(() => {
      //     _self.showAwardTips = false;
      //   }, 10000);
      // }
      this.popUps.showSignType = false;
    },
    /**获取游戏列表 */
    getGameList() {
      // this.mescroll.showDownScroll();
      return this.$post("/api/quiz/match/videoGames")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            this.leagueInfo.gameList = dataResponse.data;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    changeGame(videoGameId, e) {
      if (videoGameId == 0) {
        this.leagueInfo.requestParam.videoGameId = null;
      } else {
        this.leagueInfo.requestParam.videoGameId = videoGameId;
      }
      this.leagueInfo.requestParam.pageNo = 1;
      this.leagueInfo.matchList = [];
      $(".upwarp-nodata").hide();

      this.getIndexMatchData().then(data => {
        this.mescroll.endSuccess(this.leagueInfo.currPageSize, this.leagueInfo.loadMore);
      });
      this.scrollTarget(e.currentTarget.previousElementSibling);
    },
    scrollTarget(target) {
      if (!target) {
        return;
      }
      var thisLeft = target.offsetLeft - 20;
      console.log(thisLeft, "thisLeft");
      $(".list").animate({ scrollLeft: thisLeft }, 500);
    },

    /**获取联赛列表 */
    getLeagueList() {
      return this.$post("/api/quiz/match/leagueList")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            this.leagueList = dataResponse.data;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    getIndexMatchData() {
      let param = {};
      param = this.leagueInfo.requestParam;
      return this.$post("/api/quiz/match/indexQuizMatch", param)
        .then(rsp => {
          const dataResponse = rsp;
          this.stopReapeat = false;
          if (dataResponse.code == 200) {
            let dataList = dataResponse.data.dataList;
            if (dataList) {
              this.leagueInfo.currPageSize = dataList.length;
            }
            this.leagueInfo.loadMore = dataResponse.data.hasNext;
            this.leagueInfo.matchList = this.leagueInfo.matchList.concat(dataList);
            this.leagueInfo.requestParam.totalPages = dataResponse.data.totalPages;
            this.leagueInfo.requestParam.pageNo = dataResponse.data.pageNo;
            this.createSpList();
          }
          if (this.leagueInfo.matchList.length > 0) {
            this.noData = false;
          } else {
            this.noData = true;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    refreshFirstData() {
      if (this.leagueInfo.matchList.length == 0) {
        return;
      }
      let param = {};
      param.pageNo = 1;
      param.pageSize = this.leagueInfo.requestParam.pageNo * this.leagueInfo.requestParam.pageSize;
      param.leagueId = this.leagueInfo.requestParam.leagueId
      param.videoGameId = this.leagueInfo.requestParam.videoGameId

      return this.$post("/api/quiz/match/indexQuizMatch", param)
        .then(rsp => {
          const dataResponse = rsp;
          this.stopReapeat = false;
          if (dataResponse.code == 200) {
            let dataList = dataResponse.data.dataList;
            if (dataList.length == 0) {
              return;
            }
            // let tempList = this.leagueInfo.matchList.slice(this.leagueInfo.requestParam.pageSize);
            this.leagueInfo.matchList = dataList;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    createSpList() {
      this.leagueInfo.currSpList = [];
      this.leagueInfo.matchList.forEach(matchInfo => {
        if (matchInfo.quizMathGame.id) {
          this.leagueInfo.currSpList = this.leagueInfo.currSpList + matchInfo.quizMathGame.id + ",";
        }
      });
      console.log("获取赔率列表", this.leagueInfo.currSpList);
    },
    /**
     * 定时页面更新赔率
     */
    updateMatchSp() {
      let param = {};
      param.matchGameIds = this.leagueInfo.currSpList;
      return this.$post("/api/quiz/match/updateSp", param)
        .then(rsp => {
          let _this = this;
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            let quizMathGameList = dataResponse.data;
            if (quizMathGameList.length > 0) {
              quizMathGameList.forEach(quizMathGame => {
                _this.leagueInfo.matchList.forEach(match => {
                  if (quizMathGame.matchId === match.matchId) {
                    if (
                      !match.quizMathGame.quizOptions ||
                      match.quizMathGame.quizOptions.length == 0
                    ) {
                      return;
                    }
                    // console.log("更新");
                    for (
                      let index = 0;
                      index < match.quizMathGame.quizOptions.length;
                      index++
                    ) {
                      let quizzedCount =
                        match.quizMathGame.quizOptions[index].quizzedCount;
                      match.quizMathGame = quizMathGame;
                      match.quizMathGame.quizOptions[
                        index
                      ].quizzedCount = quizzedCount;
                    }
                  }
                });
              });
            }
            // console.log("更新赔率");
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    goUrlPage(url) {
      this.$router.push({
        path: url,
        query: {}
      });
    },
    onScroll() {
      //可滚动容器的高度
      let innerHeight = document.querySelector("#guess_list").clientHeight;
      //屏幕尺寸高度
      let outerHeight = document.querySelector("#mainId").clientHeight;
      //可滚动容器超出当前窗口显示范围的高度
      let scrollTop = document.querySelector("#main").scrollTop;
      if (innerHeight < outerHeight + scrollTop + 30) {
        //加载更多操作
        if (!this.leagueInfo.loadMore) {
          return;
        }
        if (this.stopReapeat) {
          return;
        }
        this.stopReapeat = true;
        console.log("loadmore");
        this.leagueInfo.requestParam.pageNo += 1;
        this.getIndexMatchData();
      }
    },
    //查询设置用户钱包
    getUserWallet() {
      return this.$post("/api/starNum/queryStarNum")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            console.log(dataResponse.data.ableRecScore, "获取用户的星星");
            this.setUserInfo({
              ...this.userInfo,
              recScore: dataResponse.data.recScore,
              giftRecScore: dataResponse.data.giftRecScore,
              ableRecScore: dataResponse.data.ableRecScore,
              nickName: dataResponse.data.nickName,
              icon: dataResponse.data.icon
            });

            console.log(this.userInfo);
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    //查询椰云积分
    queryYeYunPoints() {
      return this.$post("/api/yeYunUser/yeYunUserInfo")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            console.log(dataResponse.data, "获得用户椰云积分");
            this.setUserInfo({
              ...this.userInfo,
              yeYunPoints: dataResponse.data.score
            });
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    //查询嗨乐积分
    queryHaiLePoints() {
      return this.$post("/api/haiLeUser/getUserHaiLeBalance")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            console.log(dataResponse.data.userHaiLeBalance, "获得用户嗨乐积分");
            this.setUserInfo({
              ...this.userInfo,
              haiLePoints: dataResponse.data.userHaiLeBalance
            });
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    dataRefresh() {
      this.queryYeYunPoints();
      // this.queryHaiLePoints(); 去掉嗨乐积分显示
      this.getUserWallet();
    },
    // 跳转到椰云积分商城
    goToYeYunPage() {
      this.$post("/api/yeYunUser/getYeYunIndex")
        .then(rsp => {
          const dataResponse = rsp;
          let yeYunUrl = dataResponse.message;
          console.log(yeYunUrl);
          window.location.href = yeYunUrl;
        })
        .catch(error => {
          console.log(error);
        });
    },
    //跳转到嗨乐积分商城
    goToHaiLePage() {
      this.$post("/api/haiLeUser/getHaileChannelUrl")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == "200") {
            let haiLeUrl = dataResponse.data.haiLeChannelUrl;
            console.log(haiLeUrl);
            window.location.href = haiLeUrl;
          } else if (dataResponse.code == "1001") {
            this.$toast("手机未绑定", 1.5);
            setTimeout(() => {
              this.goToBindPhone();
            }, 1500);
          } else {
            console.log(dataResponse.message, 1.5);
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    //预测banner广告
    getBannerUrl() {
      let param = { typeStr: "7" };
      return this.$post("/api/getAdList", param)
        .then(rsp => {
          this.readyFlag = true;
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            console.log(dataResponse, "广告位置");
            this.bannerUrl = dataResponse.data.adList7;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    //跳转地址
    toUrl(url) {
      console.log(url, "跳转地址");
      window.open(url, "_blank");
    },

    toCharge() {
      this.popUps.payPops.showRechargePop = true;
    },

    /**关闭支付弹窗 */
    closeRechargePop() {
      this.popUps.payPops.showRechargePop = false;
    },
    toLocation(href) {
      if (href != "") {
        window.location.href = href;
      }
    },
    openPopAlert() {
      this.popUps.payPops.showPop = true;
    },
    /**h5支付后 */
    confirm() {
      this.popUps.payPops.showPop = false;
      this.getUserWallet();
    },
    /** 排行榜*/
    openWinTop() {
      this.$router.push({
        path: "/hd/hd105/rank",
        query: {}
      });
    },
    //跳转功能弹窗
    toPop(location) {
      //1：充值弹窗；2：签到弹窗; 3:排行榜
      console.log(location, "功能弹窗跳转类型");
      if (location == 1) {
        this.toCharge();
      } else if (location == 2) {
        this.popUps.showSignType = true;
      } else if (location == 3) {
        this.openWinTop();
      }
    },
    checkOpenH5InWx() {
      //是否在微信中打开账号密码登录的H5
      var clientType = this.$route.query.clientType;
      var biz = this.$route.query.biz;
      if (clientType == 6 && biz == 1) {
        let u = navigator.userAgent;
        if (u.toLowerCase().match(/MicroMessenger/i) != "micromessenger") {
          //不是微信打开
          return false;
        } else {
          return true;
        }
      } else {
        return false;
      }
    },
    //刷新数据
    onClickRefresh() {
      this.dataRefresh();
      if (this.spUpdate.reflushFlag) {
        //数据加载防重复点击加载 以及 0.5秒刷新按钮动画延迟
        return;
      }
      this.spUpdate.reflushFlag = true;
      setTimeout(() => {
        this.spUpdate.reflushFlag = false;
      }, 500);
      this.downCallback();
    }
  }
};
</script>

<style lang="scss">
.guessPage {
  .swiper-pagination {
    bottom: 2.6667vw;
    left: initial;
    right: 4vw;
    width: auto;
  }
  .swiper-pagination-bullet {
    background: rgba(255, 255, 255, 0.4);
  }
  .swiper-pagination-bullet-active {
    background-color: #fff;
  }
}
</style>


<style lang='scss' scoped>
@import "../../../assets/common/_base";
@import "../../../assets/common/_mixin";

.Page {
  background-color: #1f1212;
}

.main {
  overflow: auto;
}

.ban_slide {
  overflow: hidden;
}

.mod_header {
  background-color: #321919;
  h2 {
    line-height: 11.73vw;
    font-size: 4.8vw;
    font-weight: normal;
    color: #fedcd7;
    text-align: center;
    &::after {
      content: "";
      position: relative;
      top: 3px;
      margin-left: 1.8vw;
      @include getTriangle(5px, #fedcd7, down);
    }
    &.active {
      &::after {
        position: relative;
        top: -3px;
        @include getTriangle(5px, #fedcd7, up);
      }
    }
  }
}

.progress {
  position: absolute;
  bottom: -0.8vw;
  left: 0;
  z-index: 10;
  width: 100%;
  height: 0.8vw;
  .bar {
    height: 100%;
    @include getBgLinear(right, #5d3517, #b93029);
    transform: translateX(-100%);
    -webkit-transform: translateX(-100%);
    animation: barMove 5s linear infinite;
  }
}

@keyframes barMove {
  from {
    transform: translateX(-100%);
    -webkit-transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
    -webkit-transform: translateX(0);
  }
}

@-webkit-keyframes barMove {
  from {
    transform: translateX(-100%);
    -webkit-transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
    -webkit-transform: translateX(0);
  }
}

.banner {
  height: 36vw;
  margin: 2.6667vw;
}

.mod_award {
  @extend .flex_hc;
  height: 8.5333vw;
  margin: 2.6667vw 3.2vw 0;
  padding: 0 2.6667vw 0 2.2667vw;
  background-color: #32191e;
}

.horn_icon {
  width: 5.3333vw;
  height: 5.3333vw;
  @include getBgImg("../../../assets/images/guess/horn.png");
}

.horn_close {
  width: 4.8vw;
  height: 4.8vw;
  @include getBgImg("../../../assets/images/guess/horn_close.png");
}

.winner_scroll {
  flex: 1;
  -webkit-flex: 1;
  height: 8.5333vw;
  overflow: hidden;
  li {
    @extend .flex_hc;
    padding: 0 2.6667vw 0 2.2667vw;
    color: #fedcd7;
    span {
      font-size: 3.7333vw;
      line-height: 1.2;
    }
    .winner_name {
      @include t_nowrap(20vw);
      padding: 0 1.8667vw;
      color: #d6a638;
    }
    .award_value {
      @include t_nowrap(30.3333vw);
      padding: 0 1.8667vw;
      color: #d6a638;
    }
  }
  .notice {
    @include t_nowrap(100%);
  }
}

.match_tab {
  margin: 2.6667vw 2.6667vw 0;
  height: 8.5333vw;
  overflow: hidden;
  ul {
    @extend .flex;
    height: calc(100% + 6px);
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
  li {
    @extend .flex_v_h;
    flex: none;
    -webkit-flex: none;
    width: 19.4667vw;
    height: 8.5333vw;
    font-size: 4vw;
    color: #fedcd7;
    background-color: #4e2823;
    border-radius: 3px;
    margin-right: 1.0667vw;
    @include getRadiusBorder(#6d3932, all, 6px);
    &.active {
      background-color: #ba3129;
      @include getRadiusBorder(#fb564d, all, 6px);
    }
  }
}

.league_tab {
  position: relative;
  ul {
    @extend .g_c_mid;
    position: absolute;
    z-index: 10;
    top: 100%;
    width: 100%;
    background-color: #4c2723;
    box-shadow: 0 14px 14px 0px rgba(0, 0, 0, 0.5);
    &::after {
      content: "";
      @extend .g_c_mid;
      top: -9px;
      @include getTriangle(5px, #4c2723, up);
    }
  }
  li {
    line-height: 10.67vw;
    font-size: 4.8vw;
    color: #ffe9e9;
    @include getBorder(bottom, #703b35);
    text-align: center;
    &:last-child {
      background: none;
    }
  }
}

.navBar {
  @extend .flex_v_justify;
  height: 12vw;
  padding-left: 2.67vw;
  @include getBorder(top, #4e261e);
}

.users {
  @extend .flex_hc;
  img {
    width: 7.7333vw;
    height: 7.7333vw;
    margin-right: 1.3333vw;
    border-radius: 50%;
    object-fit: cover;
  }
}

.user_name {
  font-size: 2.9333vw;
  color: #fedcd7;
}

.user_assets {
  @extend .flex_hc;
  padding: 1.3333vw 2.4vw 1.3333vw 0.9333vw;
  font-size: 2.6667vw;
  color: #fedcd7;
  white-space: nowrap;
  background-color: #1f1212;
  border: 1px solid #4e2823;
  border-radius: 4vw;
  span {
    margin: 0 1.8667vw;
    font-size: 3.7333vw;
    color: #fff300;
  }
  img {
    width: 5.6vw;
    height: 5.6vw;
    margin-right: 0;
    object-fit: contain;
  }
  .add {
    width: 3.3333vw;
    height: 3.3333vw;

    @include getBgImg("../../../assets/images/guess/add.png");
  }
}

.coco_points {
  margin-left: 2.1333vw;
  font-size: 2.6667vw;
  text-align: center;
  p {
    color: #fff;
  }
  a {
    display: block;
    width: 17.3333vw;
    margin-top: 1.3333vw;
    line-height: 4.4vw;
    color: #fff300;
    background-color: #4e2823;
    border: 1px solid #6d3932;
    border-radius: 4.6667vw;
  }
}

.herf_gather {
  @extend .flex_hc;
  a {
    width: 6.4vw;
    height: 6.4vw;
    margin: 0 2.1333vw 0 2.1333vw;
  }
}

.guess_list {
  padding: 0 2.67vw 8vw;
}

.no_data {
  margin-top: 30vw;
}

.record_icon,
.get_icon,
.exchange_icon {
  position: relative;
  @include getBgImg("../../../assets/images/guess/record_icon.png");
  ul {
    @include getRadiusBorder(#d6564f, all, 6px);
    position: absolute;
    right: -1.2vw;
    top: 7.93vw;
    z-index: 10;
    width: 18.67vw;
    border-radius: 3px;
    background-color: #ba3129;
    &::after {
      content: "";
      position: absolute;
      top: 0.27vw;
      right: 3.47vw;
      transform: translateY(-100%);
      -webkit-transform: translateY(-100%);
      @include getTriangle(1.33vw, #ba3129, up);
    }
  }
  li {
    line-height: 10.67vw;
    font-size: 3.2vw;
    color: #ffeaea;
    text-align: center;
    @include getBorder(bottom, #d6564f);
    &:last-child {
      background: none;
    }
  }
}
.con {
  height: 110px;
  margin-top: 8px;
  overflow: hidden;
  .list {
    height: calc(100% + 6px);
    white-space: nowrap;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }
  .item {
    display: inline-block;
    margin-right: 8px;
    &:last-child {
      margin-right: 0;
    }
  }
  img {
    width: 250px;
    height: 110px;
    border-radius: 4px;
    object-fit: cover;
  }
}
.get_icon,
.exchange_icon {
  position: relative;
  @include getBgImg("../../../assets/images/guess/get_icon.png");
  span {
    @extend .g_c_mid;
    top: calc(100% + 2.1333vw);
    z-index: 10;
    padding: 1.6vw 2vw;
    font-size: 3.2vw;
    color: #fedcd7;
    background-color: rgba(0, 0, 0, 0.7);
    border: 0.1333vw solid #714038;
    border-radius: 0.5333vw;
    white-space: nowrap;
    &::before {
      content: "";
      @extend .g_c_mid;
      top: -3.2vw;
      @include getTriangle(1.6vw, rgba(0, 0, 0, 0.7), up);
    }
  }
}

.exchange_icon {
  @include getBgImg("../../../assets/images/guess/exchange_icon.png");
}

.link_icon {
  @include getBgImg("../../../assets/images/guess/link_icon.png");
}

.office {
  position: relative;
  margin-top: -13.3333vw;
  margin-left: -2.6667vw;
  padding: 50.6667vw 12vw 6.6667vw 15.7333vw;
  font-size: 4.5333vw;
  color: #fff2f0;
  text-align: center;
  @include getBgImg("../../../assets/images/guess/office_bg.png");
  .close {
    position: absolute;
    top: 18.8vw;
    right: 0;
    z-index: 1;
    width: 8vw;
    height: 8vw;
    @include getBgImg("../../../assets/images/guess/close.png");
    background-size: contain;
  }
  img {
    position: relative;
    z-index: 10;
    width: 57.3333vw;
    height: 57.3333vw;
    object-fit: cover;
    -webkit-touch-callout: inherit !important;
    // @include getBgImg("../../../assets/images/guess/office_code.png");
    // background-size: contain;
    // background-position: top center;
  }
  p {
    margin-top: 4vw;
    line-height: 6.4vw;
  }
  .office_txt {
    font-size: 3.2vw;
    line-height: 1;
  }
  .hide_img {
    @extend .g_v_c_mid;
    width: 100%;
    height: 100%;
    object-fit: contain;
    opacity: 0;
    z-index: 0;
  }
}

.qr_code_pop {
  position: absolute;
}

.to_browser_pop {
  img {
    position: absolute;
    top: 0.6667vw;
    right: 2.6667vw;
    width: 92.8vw;
  }
}

.refresh_btn {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  @include getBgImg("../../../assets/images/match/refresh_btn.png");

  position: fixed;
  z-index: 10;
  right: 5px;
  bottom: 150px;
}

.refresh_btn.active {
  animation: rotate 0.5s;
}

@keyframes rotate {
  form {
    transform: rotate(0);
  }
  to {
    transform: rotate(360deg);
  }
}

@-webkit-keyframes rotate {
  form {
    transform: rotate(0);
  }
  to {
    transform: rotate(360deg);
  }
}
</style>
