package com.esportzoo.esport.controller.cms;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.alibaba.fastjson.JSONObject;
import com.esportzoo.common.appmodel.domain.result.ModelResult;
import com.esportzoo.esport.client.service.cms.CmsContentServiceClient;
import com.esportzoo.esport.connect.request.BaseRequest;
import com.esportzoo.esport.connect.request.cms.UserPublishContentRequest;
import com.esportzoo.esport.connect.response.CommonResponse;
import com.esportzoo.esport.constant.ResponseConstant;
import com.esportzoo.esport.constants.CmsTypeDefineConstant;
import com.esportzoo.esport.controller.BaseController;
import com.esportzoo.esport.domain.CmsContent;
import com.esportzoo.esport.domain.UserConsumer;
import com.esportzoo.esport.manager.CommonManager;
import com.esportzoo.esport.vo.cms.UserPublishContentVo;

/**
 * @description: 用户发布短文相关
 *
 * @author: Haitao.Li
 *
 * @create: 2019-08-23 14:24
 **/

@Controller
@RequestMapping("userContent")
@Api(value = "用户短文相关接口", tags = { "用户短文相关接口" })
public class UserContentController extends BaseController {

	public static final String logPrefix = "用户短文相关接口";

	@Autowired
	@Qualifier("cmsContentServiceClient")
	private CmsContentServiceClient cmsContentServiceClient;
	@Autowired
	private CommonManager commonManager;
	@Value("${shortcms.upload.path}")
	private String uploadPath;

	@Value("${shortcms.res.host}")
	private String resPath;

	@RequestMapping(value = "/publish", produces = "application/json; charset=utf-8", method = RequestMethod.POST)
	@ApiOperation(value = "发布", httpMethod = "POST", consumes = "multipart/form-data", produces = "application/json")
	@ApiResponse(code = 200, message = "发布", response = CommonResponse.class)
	public @ResponseBody CommonResponse<JSONObject> publishContent(HttpServletRequest request, @RequestParam(value = "files", required = false) CommonsMultipartFile[] files, UserPublishContentRequest publishRequest) {
		try {
			logger.info(logPrefix + "基础参数[{}]", JSONObject.toJSONString(publishRequest));
			JSONObject jsonObject = new JSONObject();
			UserConsumer userConsumer = getLoginUsr(request);
			if (userConsumer == null) {
				return CommonResponse.withErrorResp("用户未登录");
			}
			Integer typeId = publishRequest.getTypeId();
			if (null == typeId || null == CmsTypeDefineConstant.valueOf(typeId)) {
				return CommonResponse.withErrorResp("要发布的类型不对");
			}
			if (StringUtils.isBlank(publishRequest.getContent())) {
				return CommonResponse.withErrorResp("请输入短文内容");
			}
			String uploadImage = "";
			if (files != null && files.length > 0) {
				logger.info("files.length=[{}]", files.length);
				uploadImage = commonManager.uploadImage(files, uploadPath, resPath, typeId);
				if (StringUtils.isEmpty(uploadImage)) {
					return CommonResponse.withErrorResp("上传图片或者视频失败");
				}
				logger.info(logPrefix + "上传成功后的地址[{}]", uploadImage);
			}
			UserPublishContentVo vo = new UserPublishContentVo();
			vo.setNickName(userConsumer.getNickName());
			vo.setUserId(userConsumer.getId());
			vo.setTypeId(typeId);
			if (typeId.intValue() == CmsTypeDefineConstant.USER_VIDEO.getIndex()) {// 用户发布视频
				vo.setTitle(publishRequest.getContent());
				// 通过视频截取第一帧 保存为图片
				if (StringUtils.isNotBlank(uploadImage)) {
					vo.setContent(uploadImage);
				}
			} else {
				vo.setContent(publishRequest.getContent());
				vo.setImgUrls(uploadImage);
			}
			ModelResult<Long> modelResult = cmsContentServiceClient.userPublishCmsContent(vo);
			if (null == modelResult || !modelResult.isSuccess() || null == modelResult.getModel()) {
				return CommonResponse.withErrorResp("发布异常");
			}
			jsonObject.put("cmsId", modelResult.getModel());
			jsonObject.put("uploadImage", uploadImage);
			return CommonResponse.withSuccessResp(jsonObject);
		} catch (Exception e) {
			logger.info(logPrefix + "用户发布文章出现异常,异常信息:{}", e.getMessage(), e);
			return CommonResponse.withResp(ResponseConstant.SYSTEM_ERROR_CODE, ResponseConstant.SYSTEM_ERROR_MESG);

		}
	}

	@RequestMapping("updateVideoTitleImg")
	@ApiOperation(value = "处理视频封面", httpMethod = "POST", consumes = "application/x-www-form-urlencoded", produces = "application/json")
	@ApiResponse(code = 200, message = "话题页列表", response = CommonResponse.class)
	public @ResponseBody CommonResponse<Long> updateVideoTitleImg(HttpServletRequest request, String videoUrl, Long cmsId, BaseRequest baseRequest) {
		try {
			UserConsumer userConsumer = getLoginUsr(request);
			if (userConsumer == null || null == cmsId) {
				return CommonResponse.withErrorResp("用户未登录或参数异常");
			}
			String img = "";
			if (StringUtils.isNotBlank(videoUrl)) {
				img = commonManager.getTitleImgByVideo(videoUrl, uploadPath, resPath);
				logger.info(logPrefix + "用户发布文章视频第一帧图片:{}", img);
			}
			if (StringUtils.isNotBlank(img)) {
				CmsContent cmsContent = new CmsContent();
				cmsContent.setId(cmsId);
				cmsContent.setTitleImg(img);
				cmsContentServiceClient.updateCmsContentById(cmsContent);
				return CommonResponse.withSuccessResp("处理成功");
			}
			return CommonResponse.withErrorResp("处理异常");
		} catch (Exception e) {
			logger.info(logPrefix + "用户发布文章出现异常,异常信息:{}", e.getMessage(), e);
			return CommonResponse.withResp(ResponseConstant.SYSTEM_ERROR_CODE, ResponseConstant.SYSTEM_ERROR_MESG);

		}
	}
}
