var websock = null;
var global_callback = null;
var usrTempId='143179';
var heartCheck = { //心跳对象
    timeout: 100,
    timeoutObj: null,
    serverTimeoutObj: null,
    reset: function () {
        clearTimeout(this.timeoutObj);
        clearTimeout(this.serverTimeoutObj);
        return this;
    },
    start: function (content, _self) {
        this.timeoutObj = setTimeout(() => {
            var getmsg = {
                "sceneType": 3, //房间场景
                "execType": 13, //聊天
                "playload": { "sceneId": 'R_' + _self.matchId, "sendMsg": content, "nickName": '小太阳', "usrId": usrTempId }
            }
            console.log("聊天室注意开始发送数据");
            toSendSocketMessage(getmsg);
            // this.serverTimeoutObj = setTimeout(() => {
            //   wx.closeSocket();
            // }, this.timeout);
        }, this.timeout);
    }
};

function initWebSocket(_self) { //初始化weosocket
    //ws地址
    websock = new WebSocket(_self.socketUrl);
    websock.onmessage = function (e) {
        websocketonmessage(_self, e);
    }
    websock.onclose = function (e) {
        websocketclose(e);
    }
    websock.onopen = function () {
        websocketOpen();
    }

    //连接发生错误的回调方法
    websock.onerror = function () {
        console.log("WebSocket连接发生错误");
    }
}

// 实际调用的方法
function sendSock(agentData, callback) {
    global_callback = callback;
    if (websock.readyState === websock.OPEN) {
        //若是ws开启状态
        toSendSocketMessage(agentData)
    } else if (websock.readyState === websock.CONNECTING) {
        // 若是 正在开启状态，则等待1s后重新调用
        setTimeout(function () {
            sendSock(agentData, callback);
        }, 1000);
    } else {
        // 若未开启 ，则等待1s后重新调用
        setTimeout(function () {
            sendSock(agentData, callback);
        }, 1000);
    }
}

//数据接收
function websocketonmessage(_self, res) {
    console.log('websocketonmessage');
    // global_calllback(JSON.parse(e.data));
    var data = JSON.parse(res.data);
    console.log(data, '返回数据');
    if (data.execType == 12) {
        if (data.ret == 'fail') { //返回失败,需要重连,所有的场景都需要这个,初次发消息
            var initMsg = {
                "execType": 12,
                "playload": {
                    "usrId": usrTempId
                }
            };
            toSendSocketMessage(initMsg);
        } else { //初次返回成功,则发送一条
            console.log(_self.initScene, '初次返回成功,则发送一条');
            console.log(JSON.stringify(_self.initScene), '11初次返回成功,则发送一条');
            toSendSocketMessage(_self.initScene);
        }
    } else {
        if (data.execType == 13) { //聊天
            console.log(data, '聊天室服务器返回的数据');
            _self.chatList= _self.chatList.concat(data.playload);
        } else if (data.execType == 17) { //文字直播
            console.log(res, '图文直播WebSocket服务器返回的数据');
            try {
                var playload = JSON.parse(data.playload);
                var temp = JSON.parse(playload.data);
                var type = playload.type || '';
                switch (type) {
                    case 'events_live':
                        var liveData = temp;
                        console.log(liveData, '直播中的比赛');
                        if (liveData.type == "hello") {
                            return false;
                        }
                        liveTimeLive(liveData, _self);
                        break;
                    default:
                        console.log(type);
                }
            } catch (exception) {
                console.log(exception)
            }
        } else if (data.execType == 16) {
            console.log(res, 'WebSocket服务器返回的数据');
            doMatchLiveData(data, _self);
        }
    }
}

//数据发送
function toSendSocketMessage(agentData) {
    websock.send(JSON.stringify(agentData));
}

//关闭
function websocketclose(e) {
    console.log("connection closed (" + e.code + ")");
}

function websocketOpen(e) {
    console.log(e, 'WebSocket连接打开')
    var initMsg = {
        "execType": 12,
        "playload": {
            "usrId": usrTempId
        }
    };
    //发送指定消息,所有的场景都需要这个,初次发消息
    toSendSocketMessage(initMsg);
    console.log("连接成功");
}

function getSceneMsg(sceneType, cmdType, execType, sceneId, matchId) {
    var initScene = {
        "sceneType": sceneType,
        "cmdType": cmdType,
        "execType": execType,
        "playload": {
            "sceneId": sceneId + matchId,
            "usrId": usrTempId,
            "matchId": matchId + ''
        }
    }
    return initScene;
}

//initWebSocket();

export {
    initWebSocket,
    getSceneMsg,
    sendSock,
    heartCheck,
    toSendSocketMessage
}
