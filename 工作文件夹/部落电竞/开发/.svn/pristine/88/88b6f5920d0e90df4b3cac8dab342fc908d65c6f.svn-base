package com.esportzoo.esport.manager;

import com.esportzoo.common.appmodel.domain.result.ModelResult;
import com.esportzoo.common.appmodel.domain.result.PageResult;
import com.esportzoo.common.appmodel.page.DataPage;
import com.esportzoo.esport.client.service.cms.CmsContentServiceClient;
import com.esportzoo.esport.client.service.common.CmsTypeDefineServiceClient;
import com.esportzoo.esport.connect.request.CmsContentRequest;
import com.esportzoo.esport.constants.*;
import com.esportzoo.esport.constants.cms.YunVideoStatus;
import com.esportzoo.esport.domain.CmsContent;
import com.esportzoo.esport.domain.CmsTypeDefine;
import com.esportzoo.esport.domain.NewsListVo;
import com.esportzoo.esport.option.CmsContentParam;
import com.google.common.collect.Lists;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class CmsContentManager {

	private transient final Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	@Qualifier("cmsContentServiceClient")
	CmsContentServiceClient cmsContentServiceClient;

	@Autowired
	@Qualifier("cmsTypeDefineServiceClient")
	CmsTypeDefineServiceClient cmsTypeDefineServiceClient;

	@Autowired
	private CachedManager cachedManager;



	public List<NewsListVo> getCmsContentList(CmsContentRequest cmsContentRequest){

		CmsContentParam condition = new CmsContentParam();
		DataPage<CmsContent> page = new DataPage<>();
		List<NewsListVo> newsListVoList = Lists.newArrayList();
		try {
			condition.setStatus(CmsContentStatus.ISSUE.getIndex());
			CmsChannel channel = CmsChannel.valueOf(cmsContentRequest.getContentType());
			if (channel==null){
				logger.error("无法匹配栏目类型，ContentType={}",cmsContentRequest.getContentType());
				return newsListVoList;
			}
			if (channel.getIndex() == CmsChannel.Recommend.getIndex()) {
				/* 如果是查询推荐，则直接取推荐标记位查询 */
				condition.setIsRecommend((short) CmsRecommend.POPULAR.getIndex());
			} else if (channel.getIndex() == CmsChannel.Pure_Video_.getIndex()) {
				/* 如果是查询视频栏目，则直接取视频类型 */
				condition.setTypeId(CmsTypeDefineConstant.GRAB_VIDEO.getIndex());
			} else {
				condition.setChannelId(channel.getChanneId());
			}

			if (cmsContentRequest.getPageNo() != null) {
				page.setPageNo(cmsContentRequest.getPageNo());
			}
			if (cmsContentRequest.getPageSize() != null) {
				page.setPageSize(cmsContentRequest.getPageSize());
			}
			PageResult<CmsContent> pageResult = cmsContentServiceClient.queryCmsContentPageByCondition(condition, page);
			if (!pageResult.isSuccess()){
				logger.error("查询分页咨询内容出错，错误信息:{}",pageResult.getErrorMsg());
				return newsListVoList;
			}
			List<CmsContent> dataList = pageResult.getPage().getDataList();
			newsListVoList = convertCmsToNews(dataList);

		} catch (Exception e) {
			logger.error("查询资讯内容出错，出错信息：{}",e);
			e.printStackTrace();
		}
		return newsListVoList;

	}

	private List<NewsListVo> convertCmsToNews(List<CmsContent> dataList) throws Exception {
		CmsTypeDefine cmsTypeDefine = new CmsTypeDefine();
		ModelResult<List<CmsTypeDefine>> modelResult = cmsTypeDefineServiceClient.queryCmsTypeDefine(cmsTypeDefine);
		if (!modelResult.isSuccess() && modelResult.getModel().size() == 0) {
			logger.error("查询视频类型出错或者查询到0条，错误信息：{}", modelResult.getErrorMsg());
		}
		List<CmsTypeDefine> allDefineType = modelResult.getModel();
		/** 视频 */
		List<Long> listVideo = allDefineType.stream().filter(e -> e.getCategory().equals(CmsCategoryType.video.getIndex())).map(e -> e.getId())
				.collect(Collectors.toList());
		/** 文章 */
		List<Long> listArticleLong = allDefineType.stream().filter(e -> e.getCategory().equals(CmsCategoryType.article_long.getIndex() )).map(e -> e.getId())
				.collect(Collectors.toList());
		List<Long> listArticleShort = allDefineType.stream().filter(e -> e.getCategory().equals(CmsCategoryType.article_short.getIndex() )).map(e -> e.getId())
				.collect(Collectors.toList());

		List<NewsListVo> listVos = Lists.newArrayList();
		if (dataList != null && dataList.size() > 0) {
			listVos = Lists.newArrayList();
			for (CmsContent cmsVo : dataList) {
				NewsListVo newVo = new NewsListVo();
				newVo.setAricleId(cmsVo.getId());
				newVo.setType(cmsVo.getTypeId());
				newVo.setTag(cmsVo.getAuthor());
				newVo.setDetail(cmsVo.getTitle());
//				newVo.setSeeNum(cmsVo.getViews().longValue());
				/*从缓存取*/
				newVo.setSeeNum(cachedManager.getCacheSetSize(CacheType.CMS_CONTENT.getIndex(),cmsVo.getId()+""));
				newVo.setDiscussNum(cmsVo.getComments().longValue());
				newVo.setUps(cmsVo.getUps().longValue());
				newVo.setTitleImg(cmsVo.getTitleImg());
				if (listArticleLong.contains(cmsVo.getTypeId().longValue()) || listArticleShort.contains(cmsVo.getTypeId().longValue())) {
					newVo.setImageSrc(cmsVo.getTitleImg());
				} else if (listVideo.contains(cmsVo.getTypeId().longValue())) {
					/*优先取下载地址*/
					if (cmsVo.getYunVideoStatus() == YunVideoStatus.SUCCESS.getIndex() && StringUtils.isNotEmpty(cmsVo.getYunVideoUrl())) {
						newVo.setImageSrc(cmsVo.getYunVideoUrl());
					} else {
						newVo.setImageSrc(cmsVo.getContent());
					}
				}

				listVos.add(newVo);
			}
			return listVos;
		}
		return listVos;
	}








}
