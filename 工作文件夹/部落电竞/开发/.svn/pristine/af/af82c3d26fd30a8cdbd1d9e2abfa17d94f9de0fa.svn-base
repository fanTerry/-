<template>
  <!-- 登录 -->
  <section class="mod_users">
    <div class="user_info">
      <div class="user_img">
        <img v-bind:src="getUserData.icon?getUserData.icon:require('../../assets/images/home/default_img.png')" alt />
        <!-- <img v-bind:src="getLoginData.userInfo.icon|getDefaultImg(globalConst.wxUserDefaultIcon)" alt=""/> -->
      </div>
      <div class="login_out" v-if="getLoginData.loginType == 1">
        <a class="login_btn">未登录</a>
        <span class="user_guess">我的竞猜</span>
        <div class="login_wx" @click="login">
          <span>微信登录</span>
        </div>
      </div>
      <div class="login_in" v-if="getLoginData.loginType == 2">
        <span class="user_guess" @mouseenter="popGuessMark = true" @mouseleave="popGuessMark = false">我的竞猜</span>
        <div class="user_assets">
          <span class="coin"></span>
          <span>{{getUserData.starNum}}</span>
        </div>
        <a class="recharge_btn" @click="openChargerDialog">星星充值</a>
        <a class="signin_btn" v-if="isUserSignToday==0" @click="openSignPop()">明日再来</a>
        <a class="signin_btn" v-else @click="openSignPop()">签到领星星</a>

        <div class="pop_guess" v-show="popGuessMark" @mouseenter="popGuessMark = true"
          @mouseleave="popGuessMark = false">
          <div class="guess_info">
            <p>微信昵称：<span class="name">{{getUserData.nickName}}</span></p>
            <a class='guess_out' @click="singout">退出</a>
          </div>
          <ul class="guess_list">
            <li @click="quizzesRecord()">
              <img src="../../assets/images/pop/guess_icon.png" alt="">
              <p>竞猜记录</p>
            </li>
            <li @click="starRecord">
              <img src="../../assets/images/pop/exchange_icon.png" alt="">
              <p>星星流水</p>
            </li>
            <li @click="toExchangeRecode">
              <img src="../../assets/images/pop/exchange_icon.png" alt="">
              <p>兑奖记录</p>
            </li>
            <li @click="gameRules()">
              <img src="../../assets/images/pop/playing_icon.png" alt="">
              <p>玩法规则</p>
            </li>
            <!-- <li>
              <img src="../../assets/images/pop/feedback_icon.png" alt="">
              <p>我要反馈</p>
            </li> -->
          </ul>
        </div>
      </div>
    </div>

    <!--顶部跑马灯-->
    <div class="broadcast">
      <div class="broadcast_con swiper-container">
        <ul class="list swiper-wrapper">
          <li class="item swiper-slide" v-for="(item,index) in prizeList" :key="index">
            <span>{{item.userName}}</span>
            <span>成功获得</span>
            <span class="award">{{item.goodsName}}</span>
          </li>
        </ul>
      </div>
    </div>
    <login-pops ref="loginPop"></login-pops>

    <sign-pops ref="props" :showSignType="showSignType" @closePop="showSignType = false" @updateSign="updateSign">
    </sign-pops>

    <guess-pops ref="guess" :type="type" :recordType="recordType" :showGuessType="showGuessType"
      @closePop="showGuessType = false"></guess-pops>

    <recharge-pops ref="props" :showRechargeType="showRechargeType" @closePop="showRechargeType = false"
      @updateUserScore="updateUserScore">
    </recharge-pops>

  </section>
</template>

<script>
import loginPops from "./components/login_pops.vue";
import signPops from "./components/sign_pops.vue";
import guessPops from "./components/guess_pops.vue";
import rechargePops from "./components/recharge_pops.vue";

import Swiper from "swiper";
import localStorage from "../../libs/storages/localStorage";
import cookie from "../../libs/common/cookie";
import { mapGetters, mapActions } from "vuex";

export default {
  components: { loginPops, signPops, guessPops, rechargePops },
  props: [],
  data() {
    return {
      showSignType: false,
      showGuessType: false,
      recordType: false,
      showRechargeType: false,
      commonMark: Number,
      sceneStr: null,
      loginType: 1,
      type: null,
      popGuessMark: false,
      isUserSignToday: 1,
      exchangeUrl: "",
      prizeList: [] //顶部跑马灯
    };
  },
  computed: {
    ...mapGetters({
      getLoginData: "getLoginData",
      getUserData: "getUserData",
      getBetData: "getBetData"
    })
  },
  //实时监听用户投注状态
  watch: {
    getBetData(val) {
      if (val.toCharge) {
        //去充值
        this.openChargerDialog();
      }
      if (val.toReflushBalance) {
        //投注完刷新余额
        this.creditsExchangeShow();
      }
    }
  },
  mounted() {
    this.prizeCarousel().then(() => {
      this.$nextTick(() => {
        this.initSwiper();
      });
    });
    // 查询用户登录状态
    this.getLoginInfo();
    this.checkUserSignStatus();
  },
  methods: {
    ...mapActions(["setLoginData", "setUserData"]),

    updateUserScore(wallet) {
      console.log("刷新钱包");
      console.log(wallet);
      this.walletRec = wallet;
      //刷新钱包余额
    },

    updateSign(wallet) {
      console.log("刷新钱包");
      console.log(wallet);
      this.walletRec = wallet;
      this.isUserSignToday = 0;
      //刷新钱包余额
      this.setUserData({
        ...this.getUserData,
        starNum: this.walletRec
      });
    },

    // swiper组件初始化
    initSwiper() {
      new Swiper(".broadcast_con", {
        loop: true,
        speed: 2000,
        autoplay: true,
        slidesPerView: "auto",
        centeredSlides: true,
        spaceBetween: 20,
        autoplayDisableOnInteraction: false,
        observer: true,
        observeParents: true
      });
    },
    //用户登录
    login() {
      //调用登录子组件的方法
      this.$refs.loginPop.wxCodeLogin();
    },

    //获取用户信息登录
    getLoginInfo() {
      console.log("初始化1");
      this.userInfo = localStorage.get("user");
      console.log("已获得用户信息", this.userInfo);
      if (this.userInfo != null) {
        this.queryYeYunPoints();
        this.creditsExchangeShow();
        this.setLoginData({
          ...this.getLoginData,
          loginState: true,
          loginType: 2
        });
        this.setUserData({
          ...this.getUserData,
          nickName: this.userInfo.nickName, // 用户昵称
          icon: this.userInfo.icon // 用户头像
        });
      }
    },

    //用户退出
    singout() {
      this.$axios
        .post("/api/wxlogin/wxLoginout")
        .then(dataResponse => {
          if (dataResponse.data.code != "200") {
            console.log("系统异常");
            this.wxLoginout();
            return;
          }
          this.wxLoginout();
        })
        .catch(error => {
          console.log(error);
        });
    },
    //确认用户成功退出
    wxLoginout() {
      this.popGuessMark = false;
      console.log(this.userInfo);
      localStorage.remove("user");
      cookie.delCookie("wx_account_login_cookie_sid");
      //用户退出登录后改登录标志位false
      this.setLoginData({
        loginState: false,
        loginType: 1,
        loginShowType: false,
        codeType: 0
      });
      this.setUserData({
        nickName: "", // 用户昵称
        icon: "", // 用户头像
        starNum: null,
        yeYunPoints: null
      });
      console.log("退出成功");
    },
    //竞猜记录弹窗
    quizzesRecord(param) {
      this.$refs.guess.quizzesPopRecord(param);
      this.type = 1;
      this.showGuessType = true;
      this.recordType = true;
    },
    //显示星星流水弹窗
    starRecord() {
      this.$refs.guess.getStarPage();
      this.type = 2;
      this.showGuessType = true;
    },
    // 弹出规则弹窗
    gameRules() {
      this.type = 3;
      this.showGuessType = true;
    },

    //签到领取
    //去签到
    openSignPop() {
      this.showSignType = true;
      return this.$post("/api/hdsign/queryHdGiftInfo")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            this.$refs.props.signGiftList = dataResponse.data.signGift;
            this.$refs.props.signNum = dataResponse.data.signNum;
            console.log(this.$refs.props.signGiftList);
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    //检查是否今天已签到，没有显示签到
    checkUserSignStatus() {
      console.log("检查是否今天已签到，没有显示签到");
      return this.$post("/api/hdsign/querySignStatus")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            if (dataResponse.data.signStatus == 0) {
              this.isUserSignToday = 0;
            }
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    //充值
    openChargerDialog() {
      this.showRechargeType = true;
      console.log(this.showRechargeType);
      return this.$post("/api/payment/getChargeMoneyList")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            this.$refs.props.chargeMoneyList = dataResponse.data;
            this.$refs.props.walletRec = this.walletRec;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },

    //查询可兑换积分和用户星星余额
    creditsExchangeShow() {
      return this.$post("/api/starNum/queryStarNum")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            console.log(dataResponse.data.ableRecScore, "获取用户的星星");
            this.setUserData({
              ...this.getUserData,
              starNum: dataResponse.data.ableRecScore
            });
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    //查询椰云积分
    queryYeYunPoints() {
      return this.$post("/api/yeYunUser/yeYunUserInfo")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            console.log(dataResponse.data, "获得用户椰云积分");
            this.setUserData({
              ...this.getUserData,
              yeYunPoints: dataResponse.data.score
            });
          }
        })
        .catch(error => {
          console.log(error, "调用椰云出现错误");
        });
    },
    //给login_pops弹窗调用
    dataRefresh() {
      this.queryYeYunPoints();
      this.creditsExchangeShow();
      this.checkUserSignStatus();
    },

    //兑奖记录
    toExchangeRecode() {
      let param = {};
      this.$post("/api/yeYunUser/getYeYunIndex", param)
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            // console.log(dataResponse,"兑奖记录跳转地址");
            this.exchangeUrl = dataResponse.data;
            window.open(this.exchangeUrl, "_blank");
          } else {
            this.$toast(dataResponse.message);
          }
        })
        .catch(error => {
          console.log(error);
        });
    },

    // 跑马灯数据请求
    prizeCarousel() {
      return this.$post("/api/quiz/record/exchangeRecord")
        .then(rsp => {
          const dataResponse = rsp;
          if (dataResponse.code == 200) {
            console.log(dataResponse.data, "顶部获奖跑马灯");
            this.prizeList = dataResponse.data;
          }
        })
        .catch(error => {
          console.log(error);
        });
    }
  }
};
</script>

<style lang='scss' scoped>
@import "../../assets/common/_base";
@import "../../assets/common/_mixin";

.mod_users {
  position: relative;
  // z-index: 3;
  @extend .flex_v_justify;
  width: 1234px;
  margin: -11px auto 0;
  padding: 30px 15px 22px;
  @include getBgImg("../../assets/images/home/users_bg.png");
}

.user_info {
  @extend .flex_hc;
  .login_btn {
    padding-right: 10px;
    font-size: 14px;
    color: #7f4545;
  }
}

.user_img {
  width: 72px;
  height: 68px;
  margin-right: 16px;
  padding: 14px 13px 8px;
  @include getBgImg("../../assets/images/home/user_img.png");
  img {
    width: 100%;
    height: 100%;
    padding: 6px;
    border: 1px solid #6d4829;
    border-radius: 50%;
  }
}

.user_guess {
  position: relative;
  margin-right: 48px;
  font-size: 14px;
  color: #ffdcd7;
  &::after {
    content: "";
    @extend .g_v_mid;
    right: -20px;
    width: 12px;
    height: 12px;
    @include getBgImg("../../assets/images/home/guess_icon.png");
  }
}

.user_assets {
  @extend .flex_hc;
  font-size: 14px;
  font-weight: bold;
  color: #ffdcd7;
  span {
    color: #f3d40c;
  }
  .coin {
    display: block;
    width: 20px;
    height: 20px;
    margin-right: 8px;
  }
}

.login_wx {
  width: 126px;
  height: 28px;
  cursor: pointer;
  text-align: center;
  @include getRadiusBorder(#2a2125, all, 0);
  span {
    display: block;
    line-height: 22px;
    font-size: 18px;
    border: 3px solid #0e5f83;
    border-image: linear-gradient(to bottom, #25a3ad, #0e5f83) 3 10;
    border-image: -webkit-linear-gradient(top, #25a3ad, #0e5f83) 3 10;
    border-image: -ms-linear-gradient(top, #25a3ad, #0e5f83) 3 10;
    font-weight: bold;
    color: #5eb5c5;
    background: linear-gradient(
      to top,
      rgba(38, 165, 195, 1) 0%,
      rgba(152, 233, 240, 1) 100%
    );
    background: -webkit-linear-gradient(
      bottom,
      rgba(38, 165, 195, 1) 0%,
      rgba(152, 233, 240, 1) 100%
    );
    background: -ms-linear-gradient(bottom, transparent, transparent);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
}

.login_out,
.login_in {
  @extend .flex_hc;
}

.login_in {
  position: relative;
  .user_guess {
    line-height: 60px;
    cursor: pointer;
  }
  .pop_guess {
    position: absolute;
    left: -14px;
    top: 35px;
    z-index: 5;
    width: 457px;
    height: 246px;
    padding: 44px 40px 0;
    @include getBgImg("../../assets/images/pop/guess_bg.png");
  }

  .guess_info {
    font-size: 14px;
    @extend .flex_v_justify;
    p {
      color: #6e4c47;
    }
    a {
      color: #f3d40c;
      text-decoration: underline;
    }
  }

  .guess_list {
    @extend .flex_v_justify;
    margin-top: 57px;
    text-align: center;
    li {
      cursor: pointer;
    }
    img {
      width: 38px;
      height: 38px;
    }
    p {
      padding-top: 27px;
      font-size: 14px;
      color: #ffdcd7;
    }
  }
}

.login_out {
  .user_guess {
    margin-right: 25px;
  }
  .user_guess::after {
    display: none;
  }
}

.recharge_btn,
.signin_btn {
  display: block;
  width: 122px;
  height: 34px;
  font-size: 16px;
  line-height: 30px;
  border-radius: 2px;
  color: #fff;
  text-align: center;
}

.recharge_btn {
  margin-left: 37px;
  background-clip: padding-box, border-box;
  background-origin: padding-box, border-box;
  background-image: linear-gradient(180deg, #401b20, #401b20),
    linear-gradient(180deg, #ba9d6e, #89642d);
  border: 2px transparent solid;
}

.signin_btn {
  margin-left: 18px;
  background-clip: padding-box, border-box;
  background-origin: padding-box, border-box;
  background-image: linear-gradient(180deg, #37181f, #37181f),
    linear-gradient(to bottom, #24a3ac, #0e6286);
  background-image: -webkit-linear-gradient(180deg, #37181f, #37181f),
    -webkit-linear-gradient(top, #24a3ac, #0e6286);
  border: 2px transparent solid;
}

.broadcast {
  @extend .flex_hc;
  position: relative;
  width: 525px;
  height: 24px;
  padding-left: 35px;
  &::before {
    content: "";
    @extend .g_v_mid;
    left: 0;
    display: block;
    width: 24px;
    height: 24px;
    @include getBgImg("../../assets/images/home/broadcast_icon.png");
  }
  .list {
    width: 490px;
    font-size: 14px;
    color: #7f4545;
  }
  .item {
    @extend .flex;
    width: auto;
    line-height: 24px;
  }
  .award {
    margin-left: 4px;
    @include t_nowrap(140px);
    color: #fedcd7;
  }
}

.swiper-wrapper {
  transition-timing-function: linear !important;
  -webkit-transition-timing-function: linear !important;
  -ms-transition-timing-function: linear !important;
}
</style>
