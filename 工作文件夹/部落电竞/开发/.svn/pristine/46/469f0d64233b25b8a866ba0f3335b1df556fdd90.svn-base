<template>
  <div class="login-container">
    <!--    <span>QQ第三方登录 - 回调页面</span>-->
  </div>
</template>

<script>
import loading from "components/common/loading";
import QC from "../../../libs/qqLogin.js";
import { getCookie, delCookie } from "../../../libs/utils";
export default {
  components: {
    loading,
    QC
  },
  name: "qqLogin",
  data() {
    return {
      redirect: undefined
    };
  },
  watch: {
    $route: {
      handler: function(route) {
        this.redirect = route.query && route.query.redirect;
      },
      immediate: true
    }
  },
  created() {
    // this.qqLogin();//基于JSSDK
    this.toqqLogin();//基于接口
  },
  methods: {
    // QQ第三方登录
    qqLogin() {
      var that = this; // 先将vue这个对象保存在_self对象中
      console.log("进入QQ回调处理页面");
      //检查是否登录
      if (QC.Login.check()) {
        //该处的openId，accessToken就是后台需要的参数了，后台通过这些参数拿取临时登录凭证，然后就是自己的逻辑了
        QC.Login.getMe(function(openId, accessToken) {
          // 传参给后台进行登录验证
          console.log("获得的openid，accessToken:", openId, accessToken);          
          that.toLogin(openId, accessToken);
        });
        console.log("已登录!");
      } else {
        console.log("未登录!");
      }
    },

    //传参给后台进行登录验证
    toLogin(openId, accessToken) {
      console.log("传openId，accessToken到后台");
      return this.$post("/api/qqlogin/login", {
        openId: openId,
        accessToken: accessToken
      })
        .then(dataResponse => {
          console.log("返回的参数", dataResponse);
          if (dataResponse.code != "200") {
            this.$toast(dataResponse.message);
            return;
          }
          //QQ第一次授权登录，后台不设置cookie，跳转到手机注册页面
          if (!dataResponse.data) {
            this.$router.push({
              path: "/register",
              query: {
                userInfo: dataResponse.data
              }
            });
          } else {            
            this.afterLoginSuccess(dataResponse.data);
          }
        })
        .catch(error => {
          this.$toast("登录失败,请稍后重试");
          console.log(error);
        });
    },

    //调用登录接口成功后处理逻辑
    afterLoginSuccess(member) {
      if (/^1(3|4|5|6|7|8|9)\d{9}$/.test(member.nickName)) {
        member.nickName = member.nickName.substring(0, 7) + "XXXX";
      }
      let user = {
        nickName: member.nickName,
        icon: member.icon ? member.icon : this.globalConst.userDefaultIcon,
        userId: member.id,
        phone: member.phone
      };
      window.localStorage.setItem("user", JSON.stringify(user));
      window.localStorage.user = JSON.stringify(user);
      this.$store.dispatch("setUserInfo", user);
      let redirect = window.sessionStorage.getItem("toRedirectUrl") || "/";
      console.log(redirect, "redirect");
      this.$router.push({
        path: redirect
      });
    },

    toqqLogin(){
      console.log(window.location.href,"获取当前URL");
      var code = this.GetURLString('code');
      var state = this.GetURLString('state');
      console.log("参数",code,state);
    return this.$post("/api/qqlogin/index" ,{
      code:code,
      state:state
    })
      .then(dataResponse => {
        console.log(dataResponse,"返回的消息");
        if (dataResponse.code != "200") {
          this.$toast(dataResponse.message);
          return;          
        }
        var newUserType=dataResponse.data.newUser;
        var key=dataResponse.data.key;       
        //如果是新用户则跳转到注册页
        if(newUserType){
          this.$router.push({
          path: "register",
          query: {
            key:key,
            newUserType:newUserType
          }
          });          
        }else{
            this.afterLoginSuccess(dataResponse.data.h5LoginUserResponse);
        }                  
      })
      .catch(error => {
        this.$toast("登录失败,请稍后重试");
        console.log(error,8888);
      });
    },
    //获取当前URL?后面的参数
      GetURLString(name) { 
      var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i"); 
      var r = window.location.search.substr(1).match(reg); //获取url中"?"符后的字符串并正则匹配
      var context = ""; 
      if (r != null) 
         context = r[2]; 
      reg = null; 
      r = null; 
      return context == null || context == "" || context == "undefined" ? "" : context; 
    },
  }
};
</script>
<style rel="stylesheet/scss" lang="scss"></style>
