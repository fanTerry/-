package com.esportzoo.esport.controller.ws.client;


import com.esportzoo.common.util.NetUtil;
import com.esportzoo.esport.controller.ws.constants.NettyChannelRelatedMaps;
import io.netty.bootstrap.ServerBootstrap;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpServerCodec;
import io.netty.handler.stream.ChunkedWriteHandler;
import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ApplicationContextEvent;
import org.springframework.stereotype.Component;

import static com.esportzoo.esport.controller.ws.constants.NettyChannelRelatedMaps.channelMap;

import java.util.Collection;
import java.util.concurrent.CopyOnWriteArraySet;


/**
 * @author tingjun.wang
 * @date 2019/9/29 11:03
 */

@Component
public class LoginWebsocketServer implements ApplicationListener<ApplicationContextEvent> {

	private static final Logger logger = LoggerFactory.getLogger(LoginWebsocketServer.class);
	@Value("${ls_host}")
	private String host; // 绑定的地址
	@Value("${ls_port}")
	private String port; // 绑定的端口

	private static volatile boolean isStart = false;

	public LoginWebsocketServer() {
		super();
	}

	public LoginWebsocketServer(String port) {
		this("localhost", port);
	}

	public LoginWebsocketServer(String host, String port) {
		this.host = host;
		this.port = port;
	}

	public void run(ApplicationContext springAppContext) throws Exception {
		EventLoopGroup bossGroup = new NioEventLoopGroup();
		EventLoopGroup workerGroup = new NioEventLoopGroup();
		try {
			ServerBootstrap b = new ServerBootstrap();
			b.group(bossGroup, workerGroup)
					.channel(NioServerSocketChannel.class)
					.childHandler(new ChannelInitializer<SocketChannel>() {
						@Override
						protected void initChannel(SocketChannel ch) throws Exception {
							ChannelPipeline pipeline = ch.pipeline();
							channelMap.put(ch.id(), ch); 
							logger.info("new channel {}", ch);
							logger.info("channelMap {}", channelMap);
							ch.closeFuture().addListener(new ChannelFutureListener() {  
								public void operationComplete(ChannelFuture future) throws Exception {
									// Channel 关闭后不再引用该Channel
									ChannelId delchanId = future.channel().id();
									removeChannelRelatedMapVal(delchanId);
								}
				            }); 
							pipeline.addLast("http-codec", new HttpServerCodec());
							pipeline.addLast("aggregator", new HttpObjectAggregator(65536));
							ch.pipeline().addLast("http-chunked", new ChunkedWriteHandler());
							LoginWebSocketServerHandler loginSocketServerHandler = springAppContext.getBean("loginWebSocketServerHandler", LoginWebSocketServerHandler.class);
							pipeline.addLast("handler", loginSocketServerHandler);
						}
					});
			initOptions(b);
			//绑定本机IP
			host = NetUtil.getMyIp();
			try {
				Channel ch = b.bind(host, Integer.parseInt(port)).sync().channel();
				logger.info("Web socket 服务启动 ，启动host【{}】，port【{}】", host, port);
				ch.closeFuture().sync();
			}catch (Exception e){
				logger.info("创建webSocket服务端，启动host：【{}】,port：【{}】,绑定时出错:",host,port,e);
			}
		}catch (Exception e){
			logger.info("创建webSocket服务端出错:",e);
		} finally {
			bossGroup.shutdownGracefully();
			workerGroup.shutdownGracefully();
		}
	}

	/**
	 * 配置一些netty连接优化参数
	 * · Netty提供了基于内存池的缓冲区重用机制,节约内存的使用，进而达到减少GC的次数
	 * · ChannelOption.SO_BACKLOG 初始化服务端可连接队列
	 * · ChannelOption.SO_RCVBUF/ChannelOption.SO_SNDBUF 接收缓冲区和发送缓冲区
	 * @param bootstrap
	 */
	private void initOptions(ServerBootstrap bootstrap) {
		//对于某个服务占用了端口情况下，允许重复使用本地地址和端口，
		//bootstrap.option(ChannelOption.SO_REUSEADDR, true);
		bootstrap.option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);
		bootstrap.childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);

		bootstrap.option(ChannelOption.SO_BACKLOG, 1024);
		bootstrap.childOption(ChannelOption.SO_SNDBUF, 32 * 1024);
		bootstrap.childOption(ChannelOption.SO_RCVBUF, 32 * 1024);
	}

	private void removeChannelRelatedMapVal(ChannelId delchanId) {
		String delUsrId = "";
		for (String userId : NettyChannelRelatedMaps.usrIdAndChanIdMap.keySet()) {
			if (delchanId.equals(NettyChannelRelatedMaps.usrIdAndChanIdMap.get(userId))) {
				delUsrId = userId;
				break;
			}
		}
		// 清除通道已关闭的用户
		NettyChannelRelatedMaps.usrIdAndChanIdMap.remove(delUsrId);
		Collection<String> keySet = NettyChannelRelatedMaps.sceneAndUsrIdMap.keySet();
		for (String sceneKey : keySet) {
			CopyOnWriteArraySet<String> cowArrSet = NettyChannelRelatedMaps.sceneAndUsrIdMap.get(sceneKey);
			if(CollectionUtils.isNotEmpty(cowArrSet)) {
				cowArrSet.remove(delUsrId);
			}
			if(CollectionUtils.isEmpty(cowArrSet)) {
				NettyChannelRelatedMaps.sceneAndUsrIdMap.remove(sceneKey);
			}
		}
		logger.info("===channel.close==== ，移除该用户【{}】通道【{}】，当前netty服务usrIdAndChanIdMap===>{}", delUsrId, delchanId,
				NettyChannelRelatedMaps.usrIdAndChanIdMap);

	}

	@Override
	public void onApplicationEvent(ApplicationContextEvent event) {
		ApplicationContext springAppContext = event.getApplicationContext();
		if (!isStart && "Root WebApplicationContext".equals(springAppContext.getDisplayName())) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						new LoginWebsocketServer(host, port).run(springAppContext);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}).start();
		}
		isStart = true;
	}

}
