<template>
  <div class="Page">
    <header class="mod_header">
      <nav-bar :pageTitle="'创建赛事'"></nav-bar>
    </header>
    <div class="main">
      <div class="create_match">
        <div class="item select_game">
          <div class="flex_v_justify" @click="showGameList = !showGameList">
            <label>选择游戏</label>
            <div class="flex_hc">
              {{selectGame.name=='Object'?'请选择':selectGame.name}}
              <img class="game_img" :src="selectGame.logoUrl" v-if="selectGame.logoUrl">
              <i class="toggle_icon" :class="{active:!showGameList}"></i>
            </div>
          </div>
          <div class="game_list" v-show="showGameList">
            <img v-for="(item,index) in infoData.allGames" :key="index" :src="item.logoUrl" @click="selectGame = item">
          </div>
        </div>
        <div class="item">
          <label for="match_name">赛事名称</label>
          <div><input type="text" id="match_name"><i class="edit_icon"></i></div>
        </div>
        <div class="item join_team">
          <div class="title" @click="showTeamTotal = !showTeamTotal">
            <label>参赛队伍</label>
            <div class="flex_hc">
              <span>{{createMatchParam.teams==Number?'请选择':createMatchParam.teams+'支'}}</span>
              <i class="toggle_icon" :class="{active:!showTeamTotal}"></i>
            </div>
          </div>
          <div class="select_item" v-show="showTeamTotal">
            <span :class="{select:createMatchParam.teams == item}" v-for="(item,index) in infoData.teamsList"
              :key="index" @click="toSelectTeams(item)"><i></i>{{item}}</span>
          </div>
        </div>
        <div class="item">
          <label for="team_person">每队人数</label>
          <div><input type="text" id="team_person"><i class="edit_icon"></i><span class="confirm_btn none">确定</span>
          </div>
        </div>
        <div class="item match_model">
          <label>赛事模式</label>
          <div>淘汰制</div>
        </div>
        <div class="item">
          <label for="regist_time">报名截止时间</label>
          <div @click="pickDate(dateType.DEADLINETIME)">
            <input type="text" id="regist_time">
            {{createMatchParam.deadline==Date?'':createMatchParam.deadline}}
            <i class="edit_icon"></i>
          </div>
        </div>
        <div class="item">
          <label for="game_time">比赛时间</label>
          <div @click="pickDate(dateType.MATCHTIME)">
            <!-- <input type="text" id="game_time"> -->
            {{createMatchParam.startTime==Date?'':createMatchParam.startTime}}
            <i class="edit_icon"></i>
          </div>
        </div>
        <div class="item race_round">
          <div class="flex_v_justify" @click="showMatchRound = !showMatchRound">
            <label>赛程轮次</label>
            <div class="flex_hc">
              {{createMatchParam.rounds==Number?'':createMatchParam.rounds}}
              <i class="toggle_icon" :class="{active:!showMatchRound}"></i>
            </div>
          </div>
          <div class="item" v-show="showMatchRound" v-for="(item,index) in createMatchParam.rounds" :key="index">
            <label>第{{index+1}}轮</label>
            <div>{{!createMatchParam.roundTimes[index]?'填写时间':createMatchParam.roundTimes[index]}}<i class="edit_icon"
                @click="pickDate(dateType.ROUNDTIME,index)"></i></div>
          </div>
        </div>
        <div class="item award_tips">
          <label for="award_tips">奖励说明</label>
          <textarea name="" id="award_tips" cols="30" rows="10" placeholder="请填写奖励机制"></textarea>
        </div>
        <a class="next_btn" @click="showPop = true">下一步</a>
      </div>
    </div>
    <vue-hash-calendar ref="picker" model="dialog" :scroll-change-date="true" :visible.sync="isShowCalendar"
      :default-datetime="defaultDatetime" :is-show-week-view="false" format="YY.MM.DD hh:mm" week-start="sunday"
      picker-type="datetime" :show-today-button="true" @confirm="dateConfirm">
    </vue-hash-calendar>
    <!-- 点击下一步弹出 -->
    <div class="ui_pop" v-if="showPop">
      <match-info ></match-info>
    </div>
    <footer class="mod_footer">
    </footer>
  </div>
</template>

<script>
import navBar from "components/header/nav_bar/index.vue";
import matchInfo from "./components/matchinfo.vue";
//日期选择类型
const dateType = {
  DEADLINETIME: 1, //报名截止时间
  MATCHTIME: 2, //比赛时间
  ROUNDTIME: 3 //轮次时间
};
export default {
  components: {
    navBar,
    matchInfo
  },
  props: [],
  data() {
    return {
      infoData: {
        //访问创建赛事页面所需要的数据
        allGames: Array,
        canCreate: Boolean,
        teamsList: []
      },
      selectGame: Object,
      createMatchParam: {
        //创建赛事所需要的参数
        gameId: Number, //选择的游戏id
        name: String, // 赛事名称
        teams: Number, // 参赛队伍数
        plays: Number, // 每队人数
        rounds: Number, // 赛程轮次
        roundTimes: [], // 轮次对应的时间
        matchType: Number, // 赛制：1淘汰制，2循环赛制
        deadline: Date, // 报名截止时间
        startTime: Date, //比赛开始时间
        description: String // 赛事简介/奖励说明
      },
      showTeamTotal: false,
      showGameList: false,
      showMatchRound: false,
      showPop: false,
      isShowCalendar: false, //是否显示弹窗
      isShowTips: false, //是否显示下载提示
      defaultDatetime: new Date(),
      confirmDateStr: "",
      dateType: dateType,
      selectDateType: 0,
      roundTimeIndex: null
    };
  },
  mounted() {
    this.getInfoForCreateMatch();
  },
  methods: {
    getInfoForCreateMatch() {
      this.$post("/api/matchtool/createMatch/info")
        .then(rsp => {
          console.log(rsp);
          if ((rsp.code = "200")) {
            this.infoData = rsp.data;
          } else {
            this.$toast(rsp.message);
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    pickDate(type, index) {
      this.selectDateType = type;
      this.roundTimeIndex = index;
      this.isShowCalendar = true;
    },
    dateConfirm(date) {
      this.confirmDateStr = date;
      if (this.selectDateType == dateType.DEADLINETIME) {
        this.createMatchParam.deadline = date;
      } else if (this.selectDateType == dateType.MATCHTIME) {
        this.createMatchParam.startTime = date;
      } else if (this.selectDateType == dateType.ROUNDTIME) {
        this.createMatchParam.roundTimes[this.roundTimeIndex] = date;
        console.warn(this.createMatchParam.roundTimes);
      }
    },
    toSelectTeams(item) {
      this.createMatchParam.teams = item;
      this.createMatchParam.rounds = Math.log(item) / Math.log(2);
    }
  }
};
</script>

<style lang='scss' scoped>
@import "../../assets/common/_base";
@import "../../assets/common/_mixin";

.main {
  padding: 28vw 4vw 8.6667vw;
  background: url("../../assets/images/matchtool/hpjy_header_bg.png") no-repeat
    center top;
  background-size: 100% auto;
  background-color: #090709;
}

.match_info {
  margin-top: 0 !important;
}

.edit_icon {
  @extend .g_v_mid;
  right: 0;
  width: 5.3333vw;
  height: 5.3333vw;
  @include getBgImg("../../assets/images/matchtool/edit_icon.png");
  background-size: contain;
}

.toggle_icon {
  width: 5.3333vw;
  height: 5.3333vw;
  @include getBgImg("../../assets/images/matchtool/toggle_icon.png");
  &.active {
    transform: rotate(180deg);
    -webkit-transform: rotate(180deg);
  }
}

.confirm_btn {
  @extend .flex_v_h;
  flex: none;
  width: 16.5333vw;
  height: 7.4667vw;
  color: #ee701d;
  border: 0.4vw solid currentColor;
  border-radius: 3.7333vw;
}

.create_match {
  padding-bottom: 8.5333vw;
  background-color: #fff;
  border-radius: 1.0667vw;
}

.game_img {
  width: 8vw;
  height: 8vw;
  margin: 0 3.6vw 0 1.3333vw;
  object-fit: contain;
}

.item {
  position: relative;
  @extend .flex_v_justify;
  height: 14.6667vw;
  padding: 0 4.5333vw 0 3.2vw;
  font-size: 3.7333vw;
  color: #333;
  > div {
    position: relative;
    @extend .flex_hc;
    flex: 1;
    -webkit-flex: 1;
    height: 100%;
  }
  label {
    flex: none;
    -webkit-flex: none;
    height: 100%;
    font-size: 4.2667vw;
    line-height: 14.6667vw;
  }
  input {
    position: relative;
    z-index: 1;
    width: 26.6667vw;
    flex: 1;
    -webkit-flex: 1;
    height: 100%;
    padding-right: 8.8vw;
    font-size: 3.7333vw;
    text-align: right;
    color: #333;
  }
}

.match_model > div {
  padding-right: 8.8vw;
  justify-content: flex-end;
  -webkit-justify-content: flex-end;
}

.race_round {
  display: block;
  height: initial;
  padding: 0;
  > div {
    height: 14.6667vw;
    padding: 0 4.5333vw 0 3.2vw;
  }
  .toggle_icon {
    margin-left: 3.6vw;
  }
  .item {
    padding-left: 7.2vw;
    background-color: #f4f4f4;
  }
}

.join_team {
  display: block;
  height: auto;
  padding: 0;
  .title {
    @extend .flex_v_justify;
    padding: 0 4.5333vw 0 3.2vw;
  }
  .toggle_icon {
    margin-left: 3.6vw;
  }
  .select_item {
    height: 14.9333vw;
    padding-left: 3.2vw;
    background-color: #f4f4f4;
    span {
      @extend .flex_hc;
      padding: 0 4.2667vw;
    }
    i {
      width: 3.2vw;
      height: 3.2vw;
      margin-right: 1.3333vw;
      border-radius: 50%;
      background-color: #666;
    }
    .select i {
      position: relative;
      @include getBgLinear(right, #ee701d, #f5951d);
      &::after {
        content: "";
        position: absolute;
        left: 50%;
        top: 0;
        transform: rotate(-45deg) translate(-67%, -5%);
        width: 1.6vw;
        height: 0.8vw;
        border-left: 1px solid #fff;
        border-bottom: 1px solid #fff;
      }
    }
  }
}

.select_game {
  display: block;
  padding: 0;
  height: initial;
  > div {
    height: 14.6667vw;
    padding: 0 4.5333vw 0 3.2vw;
    label {
      font-size: 4vw;
    }
  }
  .game_list {
    @extend .flex_hc;
    background-color: #f4f4f4;
    img {
      width: 8vw;
      height: 8vw;
      margin-left: 4vw;
      object-fit: contain;
    }
  }
}

.award_tips {
  display: block;
  height: initial;
  padding: 0;
  label {
    padding-left: 3.2vw;
  }
  textarea {
    width: 100%;
    height: 29.8667vw;
    padding: 3.2vw;
    line-height: 6vw;
    background-color: #f4f4f4;
    &::placeholder {
      color: #ccc;
    }
  }
}

.next_btn {
  display: block;
  margin: 8.5333vw 4vw 0;
  line-height: 11.7333vw;
  font-size: 4.5333vw;
  color: #fff;
  text-align: center;
  border-radius: 11.7333vw;
  @include getBgLinear(right, #ee701d, #f5951d);
}
</style>
