<template>
  <div>
    <ul class="chat_list">
      <!-- <li v-for="(item,index) in 10" :key="index">
        <img class="user_img" src="../../../assets/images/matchtool/default.png" alt="">
        <div class="users">
          <p class="user_name">1231456</p>
          <p class="user_message"> 啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</p>
        </div>
      </li> -->

      <li v-for="(item,index) in chatList" :key="index">
        <img class="user_img" src="../../../assets/images/matchtool/default.png" alt="">
        <div class="users">
          <p class="user_name">66{{item.nickName}}：</p>
          <p class="user_message">哈哈{{item.sendMsg}}</p>
        </div>
      </li>
    </ul>
    <div class="send_message">
      <input type="text" placeholder="点我发言" rows="1" @focus="bindFocus($event)" @blur="bindBlur" ref="inputVal"
        v-model="contentValue" :maxlength="chatContentLen">
      <!-- <textarea name id placeholder="点我发言" rows="1" @focus="bindFocus($event)" @blur="bindBlur" ref="inputVal"
        v-model="contentValue" :maxlength="chatContentLen"></textarea> -->
      <a class='send_btn' @click="sendChat"></a>
    </div>
  </div>
</template>

<script>
import { mapGetters, mapActions } from "vuex";
export default {
  components: {},
  data() {
    return {
      matchId: 0,
      chatList: [],
      socketUrl: "", //websocket地址
      lockReconnect: false, //默认进来是断开链接的
      initScene: {},
      contentValue: "",
      chatContentLen: 50,
      pageNo: 1,
      pageSize: 50,
      userId: "",
      nickName: ""
    };
  },
  computed: {
     ...mapGetters({
      getMatchInfo: "getMatchInfo", // 获取赛事ID           
    })
  },
  created() {},
  destroyed() {
    this.socketToolApi.websocketclose(); //离开路由之后断开websocket连接
  },
  mounted() {
    this.matchId =this.getMatchInfo.matchId;
    console.log(this.matchId,'初始化ID');
    this.getMatchDetail(this, true);
  },
  methods: {
    // 发送聊天信息
    sendChat() {
      this.$refs.inputVal.rows = 1;
      console.log(this.contentValue, "sendChat");
      var content = this.contentValue;
      if (!content) {
        this.$toast("请输入要发送的内容", 2);
        return;
      }
      if (content.length > this.chatContentLen) {
        this.$toast("聊天内容不能超过50个字", 2);
        return;
      }
      this.socketToolApi.heartCheck.reset().start(content, this);
      this.contentValue = "";
      this.$toast("发送成功", 1);
    },
    bindFocus(e) {
      this.$refs.inputVal.rows = 2;
      console.log(e, "获取焦点");
      const originRect = e.target.getBoundingClientRect();
      console.log(originRect, "originRect");
      let isFirst = false;
      setTimeout(() => {
        let rect = e.target.getBoundingClientRect();
        if (isFirst) {
          if (rect.top - originRect.top < 0) {
            // todo 设置body的height
            document.body.style.height =
              window.innerHeight - (originRect.top - rect.top) + "px";
            e.target.scrollIntoView(false);
            return;
          }
        }
        e.target.scrollIntoView(false);
        setTimeout(() => {
          rect = e.target.getBoundingClientRect();
          // 某些机型下，得到的top为负值，直接使用window.innerHeight
          if (rect.top > 0) {
            document.body.style.height = window.innerHeight + "px";
          } else {
            document.body.style.height =
              window.innerHeight - (originRect.top - rect.top) + "px";
          }
          e.target.scrollIntoView(false);
        }, 100);

        isFirst = false;
      }, 100);

      this.$refs.inputVal.focus();
    },
    bindBlur() {
      //document.body.style.height = "100%";
      setTimeout(function() {
        window.scrollTo(0, 0);
      }, 100);
    },
    getConfigResult: function(res) {
      console.log(res, "返回的内容");
    },
    getMatchDetail: function(_self, linkFlag) {
      var matchId = _self.matchId;
      console.log(this.initScene);
      // this.$post("/api/league/detail/" + matchId)
       this.$post("/api/league/room")
        .then(res => {
          console.log(res, "获取赛事详情");
          if (res.code == "200" && res.data) {
            _self.socketUrl = res.data.chatSocketUrl;
            // _self.matchDetail = res.data;
            _self.userId = res.data.userId + "";
            _self.nickName = res.data.nickName;
            window.sessionStorage.userId = res.data.userId + "";
            window.sessionStorage.nickName = res.data.nickName;
            var initScene = _self.socketToolApi.getSceneMsg(
              3,
              21,
              10,
              "R_",
              matchId,
              _self.userId
            );
            _self.initScene = initScene;
            // 【agentData：发送的参数；this.getConfigResult：回调方法】
            // this.socketToolApi.initWebSocket(_self);
            // _self.matchDetail = res.data;

            console.log("jinlai", _self.socketUrl);
            this.socketToolApi.initWebSocket(_self);
          } else {
            this.$toast(res.message, 2);
          }
        })
        .catch(e => {
          console.log(e);
        });
    },
    // /**切换tap */
    // selectTap: function() {
    //   var _self = this;
    //   var matchId = _self.matchId,
    //     matchStatus = _self.matchDetail.status;
    //   //需要发送消息
    //   _self.chatList = [];
    //   this.socketToolApi.toSendSocketMessage(_self.initScene);
    // }
  },
  watch: {}
};
</script>

<style lang='scss' scoped>
@import "../../../assets/common/_mixin";
@import "../../../assets/common/_base";

.chat_list {
  height: 80vw;
  padding: 1.3333vw 4vw 0;
  overflow: hidden;
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
}
li {
  display: table;
  margin-bottom: 1.3333vw;
  padding: 1.3333vw 2vw 1.3333vw 1.3333vw;
  background-color: rgba(0, 0, 0, 0.5);
  border-radius: 7.2vw;
}
.users {
  display: inline-block;
  vertical-align: top;
  max-width: 74.6667vw;
  padding-top: 0.6667vw;
  margin-left: 2.1333vw;
}
.user_img {
  width: 11.7333vw;
  height: 11.7333vw;
  object-fit: cover;
  border-radius: 50%;
  vertical-align: top;
}
.user_name {
  font-size: 3.4667vw;
  line-height: 5.3333vw;
  color: rgba(255, 255, 255, 0.5);
}
.user_message {
  font-size: 4vw;
  line-height: 5.3333vw;
  color: #fff;
}
.send_message {
  @extend .flex_v_justify;
  padding: 5.3333vw 4vw;
  input {
    width: 79.4667vw;
    height: 9.6vw;
    padding: 0 4vw;
    font-size: 4vw;
    color: #333;
    border-radius: 4.8vw;
    background-color: #fff;
  }
  .send_btn {
    width: 9.6vw;
    height: 9.6vw;
    border-radius: 50%;
    @include getBgImg("../../../assets/images/matchtool/send_message.png");
  }
}
</style>
