package com.esportzoo.esport.controller.wxaccount;

import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.esportzoo.common.appmodel.domain.result.ModelResult;
import com.esportzoo.common.redisclient.RedisClient;
import com.esportzoo.common.util.CookieUtils;
import com.esportzoo.esport.connect.request.BaseRequest;
import com.esportzoo.esport.connect.response.CommonResponse;
import com.esportzoo.esport.constants.ClientType;
import com.esportzoo.esport.constants.SignKey;
import com.esportzoo.esport.constants.user.MemberConstants;
import com.esportzoo.esport.constants.wx.AppIdAndSecret;
import com.esportzoo.esport.controller.BaseController;
import com.esportzoo.esport.controller.ws.client.LoginWebSocketServerHandler;
import com.esportzoo.esport.controller.ws.client.ScanLoginWebSocket;
import com.esportzoo.esport.domain.UserConsumer;
import com.esportzoo.esport.domain.WxAccountUserInfo;
import com.esportzoo.esport.manager.CachedManager;
import com.esportzoo.esport.manager.wxaccount.WxAccountManager;
import com.esportzoo.esport.service.consumer.UserConsumerService;
import com.esportzoo.esport.util.AccessTokenUtil;
import com.esportzoo.esport.util.WeChatUtil;
import com.esportzoo.esport.util.WxpayUtil;
import com.esportzoo.esport.vo.user.WeixinUserVO;

/**
 * @ClassName WxLoginController
 * @Description
 * @Author jiajing.he
 * @Date 2019/8/13 14:31
 * @Version 1.0
 **/
@RequestMapping("wxlogin")
@Controller
public class WxLoginController extends BaseController {

	@Autowired
	private WxAccountManager wxAccountManager;
	@Autowired
	private UserConsumerService userConsumerService;
	@Autowired
	private RedisClient redisClient;
	@Autowired
	private AccessTokenUtil accessTokenUtil;
	@Autowired
	private LoginWebSocketServerHandler loginWebSocketServerHandler;
	private final static String CODE_KEY = "wxaccount_code_key_";
	private Logger logger = LoggerFactory.getLogger(WxLoginController.class);
	@Autowired
	@Qualifier("cachedManager")
	private CachedManager cachedManager;
	@Value("${environ}")
	private String environ;
	
	/*
	 * @Value("${esport.weixin.account.channelNo}") private Long channelNo;
	 */

	@RequestMapping("check")
	public void check(HttpServletRequest request, HttpServletResponse response) throws Exception {
		//获取微信回调事件信息
		try {
			Map<String, String> callbackMap = wxAccountManager.xmlToMap(request);
			if (callbackMap != null && callbackMap.get("FromUserName").toString() != null) {
	            // 通过openid获取用户信息
				WxAccountUserInfo wechatUserInfoMap = wxAccountManager.getScanUserInfoByOpenId(accessTokenUtil.getAccessToken(AppIdAndSecret.wxService.getIndex()), callbackMap.get("FromUserName"));
	        	logger.info("获取wechatUserInfoMap返回结果 【wechatUserInfoMap:{}】", wechatUserInfoMap);
	        	ModelResult<UserConsumer> userModelResult=userConsumerService.findByUnionId(wechatUserInfoMap.getUnionid());
	        	String sid = UUID.randomUUID().toString();// uuid生成唯一key
	        	//ScanLoginWebSocket ws = new ScanLoginWebSocket();
	        	if (callbackMap.get("Event").equals("subscribe")) {
	            	logger.info("该用户第一次进行扫码关注【openId:{}】",callbackMap.get("FromUserName"));
	            	//ModelResult<UserThirdLogin> userModelResult=userConsumerService.queryUsrThirdById(wechatUserInfoMap.getOpenid());
	            	if (!userModelResult.isSuccess()||null==userModelResult.getModel()) {
	    				UserConsumer userConsumer = wxAccountManager.synchronizeUserInfo(wechatUserInfoMap, new BaseRequest(), request);
	    				if (null != userConsumer) {
	    					CookieUtils.setCookie(request, response, MemberConstants.WX_ACCOUNT_LOGIN_COOKIE_SID, sid,
	    							24 * 60 * 60);
	    					cachedManager.cachedMemberSession(userConsumer, sid);
	    					userConsumerService.updateUserConsumerLastLoginTime(userConsumer);
	    					logger.info("登陆接口,更新用户最新登陆时间，userId={},ninkName={}", userConsumer.getId(),
	    							userConsumer.getNickName());
	    					//ws.sendMessageTo(userConsumer.getNickName(),callbackMap.get("EventKey"));
	    					loginWebSocketServerHandler.pushMsgToAll(userConsumer.getNickName());
	    				}
					}else {
						UserConsumer userConsumer = userModelResult.getModel();
						logger.info("【userConsumer:{}】",JSON.toJSONString(userConsumer));
//								CookieUtils.setCookie(request, response, MemberConstants.WX_ACCOUNT_LOGIN_COOKIE_SID, sid,
//										24 * 60 * 60);
//								cachedManager.cachedMemberSession(userConsumer, sid);
//								userConsumerService.updateUserConsumerLastLoginTime(userConsumer);
//								logger.info("登陆接口,更新用户最新登陆时间，userId={},ninkName={}", userConsumer.getId(),
//										userConsumer.getNickName());
						//ws.sendMessageTo(userConsumer.getNickName(),callbackMap.get("EventKey"));
						loginWebSocketServerHandler.pushMsgToAll(userConsumer.getNickName());
					}
				}
	            if (callbackMap.get("Event").equals("SCAN")) {
	            	logger.info("该用户已扫码关注过公众号了【openId:{}】",callbackMap.get("FromUserName"));
	            	if (userModelResult.isSuccess()||null!=userModelResult.getModel()) {
	            		UserConsumer userConsumer = userModelResult.getModel();
	            		logger.info("【userConsumer:{}】",JSON.toJSONString(userConsumer));
//			            		CookieUtils.setCookie(request, response, MemberConstants.WX_ACCOUNT_LOGIN_COOKIE_SID, sid,
//										24 * 60 * 60);
//								cachedManager.cachedMemberSession(userConsumer, sid);
//								userConsumerService.updateUserConsumerLastLoginTime(userConsumer);
//								logger.info("登陆接口,更新用户最新登陆时间，userId={},ninkName={}", userConsumer.getId(),
//										userConsumer.getNickName());
	            		//ws.sendMessageTo(userConsumer.getNickName(),callbackMap.get("EventKey"));
	            		loginWebSocketServerHandler.pushMsgToAll(userConsumer.getNickName());
	            	}
	            }	
	        }
		} catch (Exception e) {
			logger.info("扫码关注或登录微信回调失败 【{}】", e.getMessage(), e);
		}
		String signature = request.getParameter("signature");
		String timestamp = request.getParameter("timestamp");
		String nonce = request.getParameter("nonce");
		String echostr = request.getParameter("echostr");
		PrintWriter writer = response.getWriter();
		writer.print(echostr);
		writer.flush();
		writer.close();
	}

	/* 让用户跳转到微信服务器进行授权 */
	@RequestMapping("toAuth")
	public ModelAndView toAuth(@RequestParam(required = true) String backUrl, BaseRequest baseRequest,
			HttpServletRequest request) {//
		if (StringUtils.isBlank(backUrl) || null == baseRequest.getAgentId()) {
			logger.info("跳转授权 重要参数为空！");
			// TODO 如果有错误页 重定向到错误页
			return null;
		}
		try {
			backUrl = URLDecoder.decode(backUrl, "utf-8");
		} catch (UnsupportedEncodingException e) {
			logger.info("回调地址解码异常");
		}
		logger.info("跳转授权 收到参数【回调处理后重定向地址{}】 【其它参数{}】", backUrl, JSON.toJSONString(baseRequest));
		String stats = "{}";
		JSONObject jsonObject = null;
		try {
			jsonObject = JSONObject.parseObject(stats);
			jsonObject.put("agentId", baseRequest.getAgentId());
			jsonObject.put("version", baseRequest.getVersion());
			logger.info("接收到重定向地址【{}】", backUrl);
			if (!backUrl.contains("agentId=") || !backUrl.contains("clientType=")) {
				int farstIndex = backUrl.indexOf("?");
				if (-1 == farstIndex) {
					backUrl = backUrl + "?" + "agentId=" + 10006 + "&clientType=" + ClientType.WXGZH.getIndex();
				} else {
					String substring = backUrl.substring(0, backUrl.indexOf("?") + 1);
					backUrl = substring + "agentId=" + 10006 + "&clientType=" + ClientType.WXGZH.getIndex();
				}
				logger.info("重定向地址没有必要参数  后台自动设置 【{}】", backUrl);
			}
		} catch (Exception e) {
			logger.info("解析数据错误 【{}】", e.getMessage(), e);
		}
		String s = null;
		try {
			/* 获取到域名 */
			logger.info("携带参数【{}】", URLEncoder.encode(jsonObject.toJSONString(), "utf-8"));
			s = wxAccountManager.toAuth(URLEncoder.encode(jsonObject.toJSONString(), "utf-8"), backUrl);
		} catch (UnsupportedEncodingException e) {
			logger.info("重定向,参数编码错误！");
		}
		return new ModelAndView(new RedirectView(s));
	}

	@RequestMapping("baseAuth")
	public ModelAndView baseOauth(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(required = true) String backUrl) {
		try {
			String code = request.getParameter("code");// 拿到的code的值
			String state = request.getParameter("state");
			try {
				state = URLDecoder.decode(state, "utf-8");
			} catch (UnsupportedEncodingException e) {
				logger.info("回调收到参数解码异常");
			}
			logger.info("state 【{}】", state);
			logger.info("微信授权回调拿到参数 【code:{}】 【重定向地址：{}】", code, backUrl);
			redisClient.set(CODE_KEY + code, code, 10);
			WeixinUserVO userOpenIdForCode = null;
			if (code.equals(redisClient.get(CODE_KEY + code))) {
				synchronized (WxLoginController.class) {
					if (code.equals(redisClient.get(CODE_KEY + code))) {
						redisClient.del(CODE_KEY + code);
						userOpenIdForCode = wxAccountManager.getUserOpenIdForCode(code);
					}
				}
			}
			/* 用户openid 和令牌 */
			String openid = userOpenIdForCode.getOpenid();
			String access_token = userOpenIdForCode.getAccess_token();
			if (StringUtils.isBlank(openid) || StringUtils.isBlank(access_token)) {
				logger.info("获取用户信息的必要参数为空 【openid:{}】 【accessToken:{}】", openid, access_token);
			} else {
				String sid = UUID.randomUUID().toString();// uuid生成唯一key
				// 获取微信用户信息
				WxAccountUserInfo userInfo = wxAccountManager.getUserInfoByOpenId(access_token, openid);
				BaseRequest baseRequest = JSONObject.parseObject(state, BaseRequest.class);
				UserConsumer userConsumer = wxAccountManager.synchronizeUserInfo(userInfo, baseRequest, request);
				if (null != userConsumer) {
					CookieUtils.setCookie(request, response, MemberConstants.WX_ACCOUNT_LOGIN_COOKIE_SID, sid,
							24 * 60 * 60);
					cachedManager.cachedMemberSession(userConsumer, sid);
					userConsumerService.updateUserConsumerLastLoginTime(userConsumer);
					logger.info("登陆接口,更新用户最新登陆时间，userId={},ninkName={}", userConsumer.getId(),
							userConsumer.getNickName());
				}
				/*
				 * return CommonResponse.withSuccessResp(UsrInfoResponse.convertByUserConsumer(
				 * userConsumer,sid));
				 */
				return new ModelAndView(new RedirectView(backUrl));
			}
		} catch (Exception e) {
			logger.info("授权回调出现异常 【{}】", e.getMessage(), e);
		}
		// TODO 如果有错误页 重定向到错误页
		return null;
	}

	/**
	 * js验证时所需的签名
	 * 
	 * @param request
	 * @param reqUrl
	 * @return
	 */
	@RequestMapping("jsCheck")
	@ResponseBody
	public Map jsCheck(HttpServletRequest request, @RequestParam(value = "reqUrl") String reqUrl) {
		Map<String, Object> wxConfig = null;
		try {
			wxConfig = wxAccountManager.getWxConfig(request, reqUrl);
		} catch (Exception e) {
			logger.info("获取微信js配置失败 【{}】", e.getMessage(), e);
		}
		return wxConfig;
	}

	@RequestMapping("getJsConfig")
	@ResponseBody
	public Map getJsConfig(HttpServletRequest request) {
		Map<String, Object> wxConfig = null;
		try {
			wxConfig = wxAccountManager.getWxConfig(request);
		} catch (Exception e) {
			logger.info("获取微信js配置失败 【{}】", e.getMessage(), e);
		}
		return wxConfig;
	}

	@RequestMapping("getAccessToken")
	@ResponseBody
	public CommonResponse<String> getAccessToken(Integer client, String timeStamp, String sign) {
		logger.info("-getAccessToken- 参数sign:{},client:{},timeStampStr:{}", sign, client, timeStamp);
		if (!"production".equals(environ)) {
			return CommonResponse.withErrorResp("Illegal environ");
		}
		if (client == null || StringUtils.isBlank(timeStamp) || StringUtils.isBlank(sign)) {
			return CommonResponse.withErrorResp("Invalid parameter");
		}
		Integer time = Integer.valueOf(WxpayUtil.getTimeStampStr()) - Integer.valueOf(timeStamp);
		if (time < 0 || time > 60 * 5) {
			return CommonResponse.withErrorResp("timeStampStr timeout");
		}
		Map<String, String> params = new HashMap<>();
		params.put("client", String.valueOf(client));
		params.put("timeStamp", timeStamp);
		String md5Sign = WxpayUtil.createMd5Sign(params, SignKey.signKey);
		if (!sign.equals(md5Sign)) {
			logger.info("-getAccessToken- 签名校验不通过");
			return CommonResponse.withErrorResp("Invalid sign");
		}
		AppIdAndSecret appIdAndSecret = AppIdAndSecret.valueOf(client);
		if (appIdAndSecret == null) {
			return CommonResponse.withErrorResp("Illegal client");
		}
		String accessToken = accessTokenUtil.getAccessToken(appIdAndSecret.getDescription(),
				appIdAndSecret.getOutDescription());
		if (StringUtils.isBlank(accessToken)) {
			return CommonResponse.withErrorResp("get accessToken error");
		}
		return CommonResponse.withSuccessResp(accessToken);
	}
	
	
	/**
	 * 生成带参数的二维码，扫描关注微信公众号，自动登录网站
	 * 
	 * @param modelMap
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("scanLogin")
	@ResponseBody
	public Map wechatScanLogin(){
		Map<String, Object> scanInfo = new HashMap<String, Object>();
		try {
			String access_token = accessTokenUtil.getAccessToken(AppIdAndSecret.wxService.getIndex());
			String url = WeChatUtil.WEIXIN_SCAN_TOKEN_URL + access_token;
			String sceneStr = "JZDJ" + new Date().getTime();
			String params = wxAccountManager.sacnReqParams(sceneStr);
			Map<String, Object> resultMap = wxAccountManager.httpClientPost(url, params);
			String qrcodeUrl = null;
			if (resultMap.get("ticket") != null) {
				qrcodeUrl = WeChatUtil.WEIXIN_SCAN_QRCODEURL + resultMap.get("ticket");
				logger.info("获取qrcodeUrl返回结果 【qrcodeUrl:{}】", qrcodeUrl);
			}
			scanInfo.put("qrcodeUrl", qrcodeUrl);
			scanInfo.put("sceneStr", sceneStr);
		} catch (Exception e) {
			logger.info("获取微信二维码失败 【{}】", e.getMessage(), e);
		}
		return scanInfo;
	}
}
