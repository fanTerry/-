package com.esportzoo.esport.controller.expert;

import com.esportzoo.common.appmodel.domain.result.ModelResult;
import com.esportzoo.esport.connect.response.CommonResponse;
import com.esportzoo.esport.connect.response.expert.ArticleDetailResponse;
import com.esportzoo.esport.connect.response.expert.RecOrderResponse;
import com.esportzoo.esport.constants.ArticleFreeType;
import com.esportzoo.esport.constants.ArticlePayModel;
import com.esportzoo.esport.constants.CacheType;
import com.esportzoo.esport.constants.ClientType;
import com.esportzoo.esport.constants.PayResultStatus;
import com.esportzoo.esport.constants.UserOperationParam;
import com.esportzoo.esport.controller.BaseController;
import com.esportzoo.esport.domain.RecExpertColumnArticle;
import com.esportzoo.esport.domain.UserConsumer;
import com.esportzoo.esport.manager.expert.ExpertArticleManager;
import com.esportzoo.esport.service.exception.errorcode.RecOrderErrorTable;
import com.esportzoo.esport.service.exception.errorcode.WalletErrorTable;
import com.esportzoo.esport.util.RequestUtil;
import com.esportzoo.esport.vo.expert.ExpertArticlePayParam;
import com.esportzoo.esport.vo.expert.ExpertArticlePayResult;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.math.BigDecimal;

import javax.servlet.http.HttpServletRequest;

/**
 * 专家文章相关Controller
 * @author: jing.wu
 * @date:2019年5月11日下午2:12:15
 */
@Controller
@RequestMapping("article")
@Api(value = "专家文章推荐相关接口", tags = { "专家文章推荐相关接口" })
public class ExpertArticleController extends BaseController {

	private transient final Logger logger = LoggerFactory.getLogger(getClass());
	@Autowired
	private ExpertArticleManager expertArticleManager;


	@RequestMapping(value = "/pay/{articleId}", produces = "application/json; charset=utf-8", method = RequestMethod.POST)
	@ApiOperation(value = "推荐文章支付接口", httpMethod = "POST", consumes = "application/x-www-form-urlencoded", produces = "application/json")
	@ApiResponse(code = 200, message = "推荐文章支付接口", response = CommonResponse.class)
	@ResponseBody
	public CommonResponse<RecOrderResponse> toPayArticle(@ApiParam(required=true, name="文章id")@PathVariable("articleId") Long articleId, 
			int agentId, HttpServletRequest request) {
		try {
			UserConsumer userConsumer = getLoginUsr(request);
			if (userConsumer == null) {
				logger.info("根据文章id支付接口,未获取到登录用户信息，articleId={}", articleId);
				return CommonResponse.withErrorResp("未获取到登录用户信息");
			}
			UserOperationParam userOperationParam = new UserOperationParam();
			userOperationParam.setSellChannel(new Long(agentId));
			userOperationParam.setClientType(ClientType.WXXCY.getIndex());
			userOperationParam.setOperIp(RequestUtil.getClientIp(request));
			userOperationParam.setOpRemark("付费阅读文章");
			ExpertArticlePayParam param = new ExpertArticlePayParam(articleId, userConsumer.getId());
			//暂时默认钱包支付
			param.setPayModel(ArticlePayModel.PAY_WALLET.getIndex());
			ModelResult<ExpertArticlePayResult> modelResult = expertArticleManager.toPay(param, userOperationParam);
			PayResultStatus payResultStatus = PayResultStatus.PAY_SUCCESS;
			if (!modelResult.isSuccess()){
				if(WalletErrorTable.REC_NOT_SUFFICIENT_FUNDS.getCode().equals(modelResult.getErrorCode())){
					//余额不足返回 payResultStatus
					payResultStatus = PayResultStatus.INSUFFICIENT_BALANCE;
				}else if(RecOrderErrorTable.REC_PAY_EXCEPTION.getCode().equals(modelResult.getErrorCode())){
					//支付异常返回错误信息
					payResultStatus = PayResultStatus.PAYMENT_EXCEPTION;
					return CommonResponse.withErrorResp(modelResult.getErrorMsg());
				}else {
					//支付失败返回错误信息
					payResultStatus = PayResultStatus.PAY_FAIL;
					return CommonResponse.withErrorResp(modelResult.getErrorMsg());
				}
			}
			return CommonResponse.withSuccessResp(new RecOrderResponse(payResultStatus.getIndex()));
		} catch (Exception e) {
			logger.info("根据文章id支付接口,发生异常，articleId={}，agentId={}, exception={}", articleId, agentId, e.getMessage(), e);
			return CommonResponse.withErrorResp(e.getMessage());
		}
	}
	
	@RequestMapping(value = "/detail/{articleId}", produces = "application/json; charset=utf-8", method = RequestMethod.POST)
	@ApiOperation(value = "查询文章详情接口", httpMethod = "POST", consumes = "application/x-www-form-urlencoded", produces = "application/json")
	@ApiResponse(code = 200, message = "查询文章详情接口", response = CommonResponse.class)
	@ResponseBody
	public CommonResponse<ArticleDetailResponse> getDetail(@ApiParam(required=true, name="文章id") @PathVariable("articleId") Long articleId, HttpServletRequest request) {
		try {
			UserConsumer userConsumer = getLoginUsr(request);
			if (userConsumer == null) {
				logger.info("查询文章详情接口，未获取到登录用户信息，articleId={}", articleId);
				return CommonResponse.withErrorResp("未获取到登录用户信息");
			}
			RecExpertColumnArticle article = expertArticleManager.getByArticleId(articleId);
			if (article == null) {
				logger.info("查询文章详情接口，未获取到文章信息，articleId={}", articleId);
				return CommonResponse.withErrorResp("未获取到文章信息");
			}
			boolean isUserPay = false;
			if (article.getIsFree().intValue() == ArticleFreeType.FREE.getIndex()) {
				cachedManager.cacheSet(CacheType.EPERT_ARTICEL.getIndex(),article.getId()+"",userConsumer.getId()+"");
				article.setViews(cachedManager.getCacheSetSize(CacheType.EPERT_ARTICEL.getIndex(),article.getId()+"").intValue());
				isUserPay = true;
			} else if (article.getUserId().longValue() == userConsumer.getId().longValue()) {
				isUserPay = true;
			} else if (article.getPrice().compareTo(new BigDecimal(0)) <= 0) {
				isUserPay = true;
			}
			else if (expertArticleManager.isPay(userConsumer.getId(), articleId)){
				isUserPay = true;
			}
			return CommonResponse.withSuccessResp(expertArticleManager.converToArticleDetail(article,isUserPay));
		} catch (Exception e) {
			logger.info("查询文章详情接口，发生异常，articleId={}，exception={}", articleId, e.getMessage(), e);
			return CommonResponse.withErrorResp(e.getMessage());
		}
	}

}
