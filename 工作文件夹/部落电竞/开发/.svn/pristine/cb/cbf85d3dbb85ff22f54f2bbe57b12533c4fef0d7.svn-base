import axios from 'axios'
import qs from 'qs';
// import {
//     Loading,
//     Message
// } from 'element-ui'
import router from '../../routers'

import baseParamConfig from '../../baseParamConfig';

let loading

//根据需要添加loading动画
function startLoading() {
    // loading = Loading.service({
    //     lock: true,
    //     text: '加载中....',
    //     background: 'rgba(0, 0, 0, 0.7)'
    // })
    // console.log('加载中....');
}

function endLoading() {
    // loading.close()
    // console.log('加载完成');
}
// 请求拦截
axios.interceptors.request.use(
    (config) => {
        startLoading()
        console.log(config, 'config');
        var param = config.data ? config.data : {};
        param.agentId = baseParamConfig.agentId;
        param.biz = baseParamConfig.biz;
        //param.sid='19eb0852-6fcb-44ed-95b9-19dbdee3ab41';//登录还没有,先统一添加sid
        if (config.url.search("expert/apply") !== -1) {} else {
            config.data = qs.stringify(param);
        }

        //设置请求头
        if (localStorage.eToken) {
            config.headers.Authorization = localStorage.eToken
        }
        return config
    },
    (error) => {
        return Promise.reject(error)
    }
)
//响应拦截
axios.interceptors.response.use(
    (res) => {
        endLoading()
        console.log("接口url:" + res.config.url + ",接口参数:", res.config.data + ",返回值:", res.data);
        if (res.status >= 200 && res.status < 300) {
            return res;
        } else if (res.status === 401) { //需要登录的但是,用户未登录
            //TODO 需要登录
            router.push({
                path: '/login'
            });
        } else {
            return res
        }

    },
    (error) => {
        endLoading()
        // 获取状态码
        const {
            status
        } = error.response

        if (status === 401) {
            //清除token
            localStorage.removeItem('eToken')
            //跳转到登录页面
            router.push({
                path: '/login'
            });
        }
        return Promise.reject(error)
    }
)

export default axios

/**
 * 封装get方法
 * @param url
 * @param data
 * @returns {Promise}
 */
export function get(url, data = {}) {
    return new Promise((resolve, reject) => {
        axios.get(url, data)
            .then(response => {
                resolve(response.data);
            })
            .catch(err => {
                reject(err)
            })
    })
}

/**
 * 封装post请求
 * @param url
 * @param data
 * @returns {Promise}
 */

export function post(url, data = {}) {
    return new Promise((resolve, reject) => {
        axios.post(url, data)
            .then(response => {
                resolve(response.data);
            }, err => {
                reject(err)
            })
    })
}

/**
 * 封装patch请求
 * @param url
 * @param data
 * @returns {Promise}
 */
export function patch(url, data = {}) {
    return new Promise((resolve, reject) => {
        axios.patch(url, data)
            .then(response => {
                resolve(response.data);
            }, err => {
                reject(err)
            })
    })
}
/**
 * 封装put请求
 * @param url
 * @param data
 * @returns {Promise}
 */
export function put(url, data = {}) {
    return new Promise((resolve, reject) => {
        axios.put(url, data)
            .then(response => {
                resolve(response.data);
            }, err => {
                reject(err)
            })
    })
}
