<template>
  <div class="ui_pop" :class="{fadeToTop:showBetOuterFlag == true}" v-if="showBetOuterFlag">
    <div class="mask" @click="closePop($event)"></div>
    <div class="bet">
      <a class="close" @click="closePop($event)"></a>
      <div class="title">
        <p class="tips">
          投注{{userBetNum}}，可得{{(userBetNum * (selectItem&&selectItem.odds?selectItem.odds:0)).toFixed(0)}} 星星</p>
        <div class="flex_hc">
          <span class="coin"></span>
          <span class="balance">余额 {{userInfo.ableRecScore}}</span>
        </div>
      </div>
      <div class="bet_num">
        <ul>
          <li :class="{select:userBetNum == num&&!focusFlag}" v-for="(num,index) in betNumList" :key="index"
            @click="chooseBetNum(num,$event)">{{num}}</li>
          <!-- <input type="text" placeholder="自定义"> -->
          <input placeholder="自定义" @input="handleInput($event)" maxlength="8" type="tel"
            onKeypress="return (/[\d]/.test(String.fromCharCode(event.keyCode)))" @blur="inputBlur"
            @focus="focusFlag=true" v-model.number.lazy="inputNum" @click.stop>
        </ul>
      </div>
      <a class="confirm_btn" @click="quizImmediately($event)">确认投注</a>
      <div class="mod_footer"></div>
    </div>
    <!-- 确认订单弹窗 -->
    <div class="confirm_order">
      <a class='close'></a>
      <h3>
        AAAAAA <span>VS</span> BBBBBB 的对战结果是？？
      </h3>
      <p>方案内容：<span>kjhakjhdsakfjhaskdfh</span></p>
      <div class="flex_hc">
        <p>投注金额：<span>10000000010</span></p>
        <p>奖励倍数：<span>10000000010</span></p>
      </div>
      <p>预计奖金：<span class="award">100000000000000</span></p>
      <a class="confirm_btn">确认</a>
    </div>
    <template v-if="showType == 2">

      <div class="betSuccess" v-if="betStatus ==  betStatusJson.BET_SUCCESS">
        <a class="close" @click="closePop($event)"></a>
        <div>
          <div class="flex_v_h">
            <span class="happy_icon"></span>
            投注成功
          </div>
          <p class="tips">投注结果见竞猜记录</p>
        </div>
      </div>
      <div class="betFailed" v-if="betStatus ==  betStatusJson.BET_FALI">
        <a class="close" @click="closePop($event)"></a>
        <div>
          <div class="flex_v_h">
            <span class="sad_icon"></span>
            {{betFailTips.title}}
          </div>
          <p class="tips">{{betFailTips.desc}}</p>
        </div>
      </div>

      <div class="betFailed" v-if="betStatus == betStatusJson.NO_BALANCE">
        <a class="close" @click="showType = 1"></a>
        <div>
          <div class="flex_v_h">
            <span class="sad_icon"></span>
            您的余额不足
          </div>
          <a class="go_recharge" @click="toCharge">去充值</a>
        </div>
      </div>
    </template>
  </div>

</template>

<script>
import { mapGetters, mapActions } from "vuex";
//投注状态弹窗
const betStatusJson = {
  NONE: 0, //0:不弹窗
  NO_BALANCE: 1, //1:余额不足
  BET_SUCCESS: 2, //2:投注成功
  BET_ING: 3, //3:投注进行中
  BET_FALI: 4 //4:投注失败
};
export default {
  components: {},
  props: ["selectItem"],
  data() {
    return {
      userBetNum: 0, //用户投入数
      betNumList: [2000, 5000, 10000], //投注选择数组
      inputNum: null, //用户输入数
      isSubmit: false, //防止重复提交
      showBetPop: false, //投注相关弹窗控制(弹窗总控制)
      betStatus: 0, //投注涉及状态:0:不弹窗,1:余额不足,2:投注成功,3:投注进行中,4:投注失败
      betFailTips: {
        title: "",
        desc: ""
      },
      betStatusJson: betStatusJson,
      showBetOuterFlag: true,
      showType: 1,
      focusFlag: false
    };
  },
  computed: {
    ...mapGetters({
      getBetData: "getBetData",
      userInfo: "getUserInfo"
    })
  },
  //实时监听用户星星状态
  watch: {
    betStatus(newValue, oldValue) {
      if (newValue != 0 && newValue != 3) {
        this.showType = 2;
        if (newValue == 2 || newValue == 4) {
          //投注成功弹窗自动消失
          setTimeout(() => {
            this.showType = 1;
          }, 2 * 1000);
        }
      } else {
        this.showType = 1;
      }
    }
  },
  mounted() {
    this.chooseBetNum(this.betNumList[0]);
  },
  methods: {
    ...mapActions(["setBetData"]),
    quizImmediately(e) {
      e.stopPropagation();
      this.betStatus = betStatusJson.BET_ING;
      if (!this.checkBalance()) {
        return;
      }
      //比赛日期+赛事编号+“*”+玩法+“|”+竟猜选项+“@”+赔率;
      let quizData = {
        matchGameId: this.selectItem.matchGameId,
        matchNo: this.selectItem.matchNo, //比赛日期+赛事编号
        playNo: this.selectItem.playNo, //玩法
        optIndex: this.selectItem.index, //竞猜选项
        betSp: this.selectItem.odds, //赔率
        userBetNum: this.userBetNum //用户投注数量
      };
      if (this.isSubmit) {
        this.$toast("正在提交中，请稍等");
        return;
      }
      this.doSubmit(quizData);
    },
    //提交竞猜
    doSubmit(quizData) {
      console.warn(quizData, "doSubmit-quizData");
      this.isSubmit = true;
      this.$post("/api/quiz/bet/doSubmit", quizData)
        .then(data => {
          console.log(data, "调用接口返回数据");
          if (data.code == 200) {
            //投注成功处理
            this.betSuccess(data);
          } else {
            //投注失败处理
            this.betFail(data);
          }
          this.isSubmit = false;
        })
        .catch(error => {
          this.isSubmit = false;
          console.log(error, "提交竞猜投注失败");
        });
    },
    betSuccess(data) {
      this.betStatus = betStatusJson.BET_SUCCESS;
      //刷新用户余额
      this.setBetData({ ...this.getBetData, toReflushBalance: true });
    },
    betFail(data) {
      this.setBetFailTips("投注失败", data.message);
    },
    //检查账户余额
    checkBalance() {
      if (!this.userBetNum) {
        this.$toast("请输入投注金额(1000的倍数)");
        return false;
      }
      if (this.userBetNum > this.userInfo.ableRecScore) {
        setTimeout(() => {
          this.betStatus = betStatusJson.NO_BALANCE;
        }, 50);
        return false;
      }
      if (this.userBetNum > this.selectItem.limit) {
        //此选项上用户最多能投多少钱
        this.$toast("该选项最多可投" + this.selectItem.limit + "星星", 4);
        return false;
      }
      return true;
    },
    //检查是否登录
    checkLogin() {
      if (this.getLoginData.loginState == true) {
        return true;
      } else {
        console.log("用户没有登录");
        this.setLoginData({
          ...this.getLoginData,
          loginShowType: true,
          codeType: 1
        });
        return false;
      }
    },
    //选择投注金额
    chooseBetNum(num, e) {
      if (e) {
        e.stopPropagation();
      }

      this.userBetNum = num;
      if (null != this.inputNum) {
        this.inputNum = null;
      }
    },
    //处理用户输入
    handleInput(e) {
      e.stopPropagation();
      this.inputNum = e.target.value;
      this.userBetNum = this.inputNum;
    },
    inputBlur() {
      this.focusFlag = false;
      this.scrollToTop();
      if (this.inputNum % 1000 != 0) {
        this.$toast("请输入投注金额(1000的倍数)");
        this.inputNum = null;
        this.userBetNum = this.inputNum;
        return;
      }
    },
    setBetFailTips(title, desc) {
      this.betStatus = betStatusJson.BET_FALI;
      this.betFailTips.title = title;
      this.betFailTips.desc = desc;
    },
    toCharge() {
      this.showBetPop = false;
      this.$router.push({
        path: "/recharge",
        query: {
          redirect: this.$route.fullPath
        }
      });
    },
    closePop(e) {
      e.stopPropagation();
      this.showBetOuterFlag = false;
      this.setBetData({ toCurBet: null });
      console.log(this.getBetData);
    },
    scrollToTop: function() {
      setTimeout(function() {
        window.scrollTo(0, 0);
        console.log("回滚");
      }, 100);
    },
    hide(e) {
      this.showBetOuterFlag = false;
      this.setBetData({ toCurBet: null });
      e.returnValue = false;
    }
  }
};
</script>

<style lang='scss' scoped>
@import "../../../assets/common/_base";
@import "../../../assets/common/_mixin";

.ui_pop {
  background-color: initial;
  .mask {
    z-index: 0;
  }
}

.close {
  position: absolute;
  right: 2.67vw;
  top: 2.67vw;
  width: 5.33vw;
  height: 5.33vw;
  @include getBgImg("../../../assets/images/guess/close.png");
  background-size: 100% 100%;
}

.bet {
  position: absolute;
  bottom: 0;
  width: 100%;
  padding-bottom: 5.33vw;
  background-color: #261314;
  .title {
    @extend .flex_v_justify;
    height: 10.67vw;
    padding: 0 12.27vw 0 2.67vw;
    background-color: #2e1a1b;
  }
  .tips {
    font-size: 3.73vw;
    color: #fedcd7;
  }
  .coin {
    width: 4.8vw;
    height: 4.8vw;
    @include getBgImg("../../../assets/images/guess/coin.png");
    background-size: 100% 100%;
  }
  .balance {
    margin-left: 2.67vw;
    font-size: 2.93vw;
    color: #86564e;
  }

  .confirm_btn {
    display: block;
    margin: 0 2.67vw;
    line-height: 11.2vw;
    font-size: 3.73vw;
    color: #fedcd7;
    text-align: center;
    background: linear-gradient(to bottom, #dc2f26, #8c191a);
    background: -webkit-linear-gradient(top, #dc2f26, #8c191a);
  }
}

.bet_num {
  padding: 4vw 1.33vw;
  ul {
    @extend .flex_hc;
    text-align: center;
  }
  li,
  input {
    flex: 1;
    -webkit-flex: 1;
    margin: 0 1.33vw;
    font-size: 4.8vw;
    line-height: 10.67vw;
    color: #cd948d;
    border-radius: 3px;
    background-color: #4e2823;
    &.select {
      @include getRadiusBorder(#bb3129, all, 6px);
      &:after {
        content: "";
        position: absolute;
        right: -1.33vw;
        top: -1.33vw;
        width: 4vw;
        height: 4vw;
        @include getBgImg("../../../assets/images/guess/select.png");
        background-size: 100% 100%;
      }
    }
  }
  input:focus {
    border: 1px solid #bb3129;
  }
  input,
  input::-webkit-input-placeholder {
    width: 100%;
    height: 10.67vw;
    color: #cd948d;
    text-align: center;
    border: 1px solid transparent;
  }
}

.betSuccess,
.betFailed {
  position: relative;
  @extend .flex_v_h;
  width: 85.33vw;
  height: 50.67vw;
  font-size: 4.8vw;
  color: #f58079;
  text-align: center;
  background-color: #261314;
  .tips {
    margin-top: 4.8vw;
    font-size: 3.2vw;
    color: #cd948d;
  }
}

.happy_icon,
.sad_icon {
  width: 8vw;
  height: 8vw;
  margin-right: 1.33vw;
}

.go_recharge {
  display: inline-block;
  width: 141.33vw;
  margin-top: 4.8vw;
  border-radius: 3px;
  line-height: 10.67vw;
  font-size: 3.73vw;
  color: #fff2f0;
  background: linear-gradient(to bottom, #dc2f26, #8c191a);
  background: -webkit-linear-gradient(top, #dc2f26, #8c191a);
}

.happy_icon {
  @include getBgImg("../../../assets/images/guess/happy_icon.png");
  background-size: 100% 100%;
}

.sad_icon {
  @include getBgImg("../../../assets/images/guess/sad_icon.png");
  background-size: 100% 100%;
}

.confirm_order {
  position: relative;
  width: 85.33vw;
  padding: 6.6vw 3.67vw 6vw;
  color: #ffdcd7;
  text-align: left;
  background: linear-gradient(-16deg, rgba(42, 24, 28, 1), rgba(52, 32, 29, 1));
  background: -webkit-linear-gradient(
    -16deg,
    rgba(42, 24, 28, 1),
    rgba(52, 32, 29, 1)
  );
  background: -ms-linear-gradient(
    -16deg,
    rgba(42, 24, 28, 1),
    rgba(52, 32, 29, 1)
  );
  box-shadow: 0px 0px 15px 0px rgba(10, 2, 4, 0.5);
  h3 {
    padding-bottom: 2.13vw;
    font-size: 3.73vw;
    line-height: 5.33vw;
    span {
      padding: 0 1.33vw;
      color: #f5b457;
    }
  }
  p {
    padding: 3vw 4vw 0 0;
    font-size: 3.2vw;
    span {
      color: #f5b457;
    }
  }
  .award {
    color: #f3d40c;
  }
  .confirm_btn {
    display: block;
    width: 31.47vw;
    margin: 4vw auto 0;
    font-size: 4.27vw;
    line-height: 8.53vw;
    font-weight: bold;
    color: #f5b457;
    text-align: center;
    border: 3px solid currentColor;
  }
}
</style>
